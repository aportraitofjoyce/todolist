{"version":3,"sources":["components/UI/Input/Input.module.css","components/Todolist/Task/Task.module.css","components/Todolist/AddItemForm/AddItemForm.module.css","components/UI/Checkbox/Checkbox.module.css","components/Todolist/Todolist.module.css","components/UI/Button/Button.tsx","components/UI/Input/Input.tsx","components/Todolist/AddItemForm/AddItemForm.tsx","components/Todolist/EditableSpan/EditableSpan.tsx","components/UI/Button/IconButton.tsx","components/Icons/Delete/Delete.tsx","components/UI/Checkbox/Checkbox.tsx","components/Todolist/Task/Task.tsx","components/Todolist/Todolist.tsx","store/actions/tasks-actions/tasks-actions.ts","store/actions/todolists-actions/todolists-actions.ts","components/Todolist/TodolistsContainer.tsx","store/reducers/todolists-reducer/todolists-reducer.ts","store/reducers/tasks-reducer/tasks-reducer.ts","store/store.ts","utils/local-storage-utils.ts","index.tsx","components/UI/Button/Button.module.css"],"names":["module","exports","Button","React","memo","active","grouped","className","restProps","finalClassName","s","default","Input","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","errorMessage","finalInputClassName","inputError","input","container","e","currentTarget","value","key","placeholder","AddItemForm","props","useState","title","setTitle","setError","onChangeHandler","useCallback","onClickHandler","trim","addItem","onKeyPressHandler","onClick","EditableSpan","editMode","setEditMode","onEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","IconButton","icon","Delete","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","Checkbox","checked","changeTaskStatus","checkbox","Task","removeTask","id","TODOLIST_ID","changeTaskTitle","isDone","taskContentContainer","taskContent","Todolist","filter","changeTodolistFilter","changeTodolistFilterToAll","changeTodolistFilterToActive","changeTodolistFilterToCompleted","removeTodolist","addTask","changeTodolistTitle","sortTasksByName","tasksToRender","tasks","t","todolistContainer","titleContainer","addTaskContainer","map","buttonsContainer","REMOVE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","SORT_TASKS_BY_NAME","REMOVE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_FILTER","CHANGE_TODOLIST_TITLE","TodolistsContainer","useSelector","state","todolists","dispatch","useDispatch","taskID","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","sortTasksByNameAC","addTodolist","NEW_TODOLIST_ID","v1","addTodolistAC","removeTodolistAC","changeTodolistFilterAC","changeTodolistTitleAC","addTodolistContainer","todolistsWrapper","tdl","initialState","rootReducer","combineReducers","action","sort","a","b","newState","store","createStore","preloadedState","localStorage","getItem","undefined","JSON","parse","err","loadState","subscribe","loadedState","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f8ed19a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__1azzw\",\"input\":\"Input_input__2HRDK\",\"inputError\":\"Input_inputError__1hcoG\",\"errorMessage\":\"Input_errorMessage__1nrIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskContentContainer\":\"Task_taskContentContainer__13kUw\",\"taskContent\":\"Task_taskContent__360MP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddItemForm_container__3kUTm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__1Umq4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistsWrapper\":\"Todolist_todolistsWrapper__2YSuQ\",\"addTodolistContainer\":\"Todolist_addTodolistContainer__3N228\",\"todolistContainer\":\"Todolist_todolistContainer__3n5Qj\",\"buttonsContainer\":\"Todolist_buttonsContainer__2chum\",\"titleContainer\":\"Todolist_titleContainer__2mDXL\",\"addTaskContainer\":\"Todolist_addTaskContainer__Ap9Ba\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    active?: boolean\r\n    grouped?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo((\r\n    {\r\n        active,\r\n        grouped,\r\n        className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${s.default} ${active ? s.active : ''} ${grouped ? s.grouped : ''} ${className ? className : ''}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        />\r\n    )\r\n})\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './Input.module.css'\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (\r\n    {\r\n        type,\r\n        onChange,\r\n        onChangeText,\r\n        onKeyPress,\r\n        onEnter,\r\n        error,\r\n        className,\r\n        spanClassName,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e)\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.errorMessage} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.inputError : ''} ${s.input} ${className ? className : ''}`\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                placeholder={'Введите текст...'}\r\n                {...restProps}\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport {Button} from '../../UI/Button/Button'\r\nimport {Input} from '../../UI/Input/Input'\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype InputPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<InputPropsType> = React.memo((props) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        error && setError(false)\r\n    }, [error])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setTitle('')\r\n            setError(true)\r\n        }\r\n    }, [props.addItem, title])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }, [onClickHandler])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <Input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error ? 'Field is required' : ''}/>\r\n            <Button onClick={onClickHandler}>Add</Button>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport {Input} from '../../UI/Input/Input'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = useCallback(() => setEditMode(true), [])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }, [props.changeTitle, title])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value), [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }, [offEditMode])\r\n\r\n    return (\r\n        editMode\r\n            ? <Input value={title}\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype IconButtonPropsType = DefaultButtonPropsType & {}\r\n\r\nexport const IconButton: React.FC<IconButtonPropsType> = React.memo((\r\n    {\r\n        className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${s.icon} ${className ? className : ''}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        />\r\n    )\r\n})\r\n","import React from 'react';\r\n\r\nexport const Delete = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n             stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n             className=\"feather feather-x\">\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n        </svg>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport s from './Checkbox.module.css'\r\n\r\ntype CheckboxPropsType = {\r\n    checked: boolean\r\n    changeTaskStatus: (isDone: boolean) => void\r\n}\r\n\r\nexport const Checkbox = React.memo((props: CheckboxPropsType) => {\r\n    const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(e.currentTarget.checked)\r\n    }\r\n\r\n    return <input type=\"checkbox\" checked={props.checked} onChange={onCheckboxChangeHandler} className={s.checkbox}/>\r\n})","import React, {useCallback} from 'react'\r\nimport s from './Task.module.css'\r\nimport {Checkbox} from '../../UI/Checkbox/Checkbox'\r\nimport {EditableSpan} from '../EditableSpan/EditableSpan'\r\nimport {IconButton} from '../../UI/Button/IconButton'\r\nimport {Delete} from '../../Icons/Delete/Delete'\r\n\r\ntype TaskPropsType = {\r\n    TODOLIST_ID: string\r\n    id: string\r\n    checked: boolean\r\n    title: string\r\n    removeTask: (id: string, TODOLIST_ID: string) => void\r\n    changeTaskTitle: (id: string, title: string, TODOLIST_ID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, TODOLIST_ID: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n    const removeTask = useCallback(() => props.removeTask(props.id, props.TODOLIST_ID),\r\n        [props.id, props.TODOLIST_ID])\r\n\r\n    const changeTaskTitle = useCallback((title: string) => props.changeTaskTitle(props.id, title, props.TODOLIST_ID),\r\n        [props.id, props.TODOLIST_ID])\r\n\r\n    const changeTaskStatus = useCallback((isDone: boolean) => props.changeTaskStatus(props.id, isDone, props.TODOLIST_ID),\r\n        [props.id, props.TODOLIST_ID])\r\n\r\n    return (\r\n        <div className={s.taskContentContainer}>\r\n            <div className={s.taskContent}>\r\n                <Checkbox checked={props.checked}\r\n                          changeTaskStatus={changeTaskStatus}/>\r\n\r\n                <EditableSpan title={props.title}\r\n                              changeTitle={changeTaskTitle}/>\r\n            </div>\r\n\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport s from './Todolist.module.css'\r\nimport {FilterValuesType, TaskType} from './TodolistsContainer'\r\nimport {AddItemForm} from './AddItemForm/AddItemForm'\r\nimport {EditableSpan} from './EditableSpan/EditableSpan'\r\nimport {Button} from '../UI/Button/Button'\r\nimport {IconButton} from '../UI/Button/IconButton'\r\nimport {Delete} from '../Icons/Delete/Delete'\r\nimport {Task} from './Task/Task'\r\n\r\ntype TodolistPropsType = {\r\n    TODOLIST_ID: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, TODOLIST_ID: string) => void\r\n    addTask: (title: string, TODOLIST_ID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, TODOLIST_ID: string) => void\r\n    changeTodolistFilter: (filter: FilterValuesType, TODOLIST_ID: string) => void\r\n    removeTodolist: (TODOLIST_ID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, TODOLIST_ID: string) => void\r\n    changeTodolistTitle: (title: string, TODOLIST_ID: string) => void\r\n    sortTasksByName: (TODOLIST_ID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo((props) => {\r\n    const changeTodolistFilter = useCallback((filter: FilterValuesType) => props.changeTodolistFilter(filter, props.TODOLIST_ID),\r\n        [props.changeTodolistFilter, props.TODOLIST_ID])\r\n\r\n    const changeTodolistFilterToAll = useCallback(() => props.changeTodolistFilter('All', props.TODOLIST_ID),\r\n        [props.changeTodolistFilter, props.TODOLIST_ID])\r\n\r\n    const changeTodolistFilterToActive = useCallback(() => props.changeTodolistFilter('Active', props.TODOLIST_ID),\r\n        [props.changeTodolistFilter, props.TODOLIST_ID])\r\n\r\n    const changeTodolistFilterToCompleted = useCallback(() => props.changeTodolistFilter('Completed', props.TODOLIST_ID),\r\n        [props.changeTodolistFilter, props.TODOLIST_ID])\r\n\r\n    const removeTodolist = useCallback(() => props.removeTodolist(props.TODOLIST_ID),\r\n        [props.removeTodolist, props.TODOLIST_ID])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.TODOLIST_ID),\r\n        [props.addTask, props.TODOLIST_ID])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(title, props.TODOLIST_ID),\r\n        [props.changeTodolistTitle, props.TODOLIST_ID])\r\n\r\n    const sortTasksByName = useCallback(() => props.sortTasksByName(props.TODOLIST_ID),\r\n        [props.sortTasksByName, props.TODOLIST_ID])\r\n\r\n    const tasksToRender = useCallback((filter: FilterValuesType) => {\r\n        switch (filter) {\r\n            case 'Completed':\r\n                return props.tasks.filter(t => t.isDone)\r\n            case 'Active':\r\n                return props.tasks.filter(t => !t.isDone)\r\n            default:\r\n                return props.tasks\r\n        }\r\n    }, [props.tasks])\r\n\r\n    return (\r\n        <div className={s.todolistContainer}>\r\n\r\n            <div className={s.titleContainer}>\r\n                <EditableSpan title={props.title}\r\n                              changeTitle={changeTodolistTitle}/>\r\n\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n\r\n            <div className={s.addTaskContainer}>\r\n                <AddItemForm addItem={addTask}/>\r\n            </div>\r\n\r\n            <div>\r\n                {tasksToRender(props.filter).map(t => {\r\n                    return (\r\n                        <Task key={t.id}\r\n                              TODOLIST_ID={props.TODOLIST_ID}\r\n                              id={t.id}\r\n                              checked={t.isDone}\r\n                              title={t.title}\r\n                              removeTask={props.removeTask}\r\n                              changeTaskTitle={props.changeTaskTitle}\r\n                              changeTaskStatus={props.changeTaskStatus}/>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n            <div className={s.buttonsContainer}>\r\n                <Button onClick={changeTodolistFilterToAll}\r\n                        active={props.filter === 'All'}\r\n                        grouped>\r\n                    All\r\n                </Button>\r\n\r\n                <Button onClick={changeTodolistFilterToActive}\r\n                        active={props.filter === 'Active'}\r\n                        grouped>\r\n                    Active\r\n                </Button>\r\n\r\n                <Button onClick={changeTodolistFilterToCompleted}\r\n                        active={props.filter === 'Completed'}\r\n                        grouped>\r\n                    Completed\r\n                </Button>\r\n\r\n            </div>\r\n\r\n            <div className={s.buttonsContainer}>\r\n                <Button onClick={sortTasksByName}\r\n                        grouped>\r\n                    Sort by name\r\n                </Button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})","import {addTodolistAC, removeTodolistAC} from '../todolists-actions/todolists-actions'\r\n\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const ADD_TASK = 'ADD_TASK'\r\nexport const CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS'\r\nexport const CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\r\nexport const SORT_TASKS_BY_NAME = 'SORT_TASKS_BY_NAME'\r\n\r\nexport const removeTaskAC = (taskID: string, TODOLIST_ID: string) => (\r\n    {type: REMOVE_TASK, taskID, TODOLIST_ID}\r\n) as const\r\nexport const addTaskAC = (title: string, TODOLIST_ID: string) => (\r\n    {type: ADD_TASK, title, TODOLIST_ID}\r\n) as const\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TASK_STATUS, taskID, isDone, TODOLIST_ID}\r\n) as const\r\nexport const changeTaskTitleAC = (taskID: string, title: string, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TASK_TITLE, taskID, title, TODOLIST_ID}\r\n) as const\r\nexport const sortTasksByNameAC = (TODOLIST_ID: string) => (\r\n    {type: SORT_TASKS_BY_NAME, TODOLIST_ID}\r\n) as const\r\n\r\nexport type TasksActionsType =\r\n    ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof changeTaskStatusAC> |\r\n    ReturnType<typeof changeTaskTitleAC> |\r\n    ReturnType<typeof sortTasksByNameAC> |\r\n    ReturnType<typeof addTodolistAC> |\r\n    ReturnType<typeof removeTodolistAC>","import {v1} from 'uuid'\r\nimport {FilterValuesType} from '../../../components/Todolist/TodolistsContainer'\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nexport const ADD_TODOLIST = 'ADD_TODOLIST'\r\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER'\r\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\r\n\r\nexport const removeTodolistAC = (TODOLIST_ID: string) => (\r\n    {type: REMOVE_TODOLIST, TODOLIST_ID}\r\n) as const\r\n\r\nexport const addTodolistAC = (title: string) => (\r\n    {type: ADD_TODOLIST, title, NEW_TODOLIST_ID: v1()}\r\n) as const\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TODOLIST_FILTER, filter, TODOLIST_ID}\r\n) as const\r\n\r\nexport const changeTodolistTitleAC = (title: string, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TODOLIST_TITLE, title, TODOLIST_ID}\r\n) as const\r\n\r\nexport type TodolistsActionsType =\r\n    ReturnType<typeof removeTodolistAC> |\r\n    ReturnType<typeof addTodolistAC> |\r\n    ReturnType<typeof changeTodolistFilterAC> |\r\n    ReturnType<typeof changeTodolistTitleAC>","import React, {useCallback} from 'react'\r\nimport {Todolist} from './Todolist'\r\nimport {AddItemForm} from './AddItemForm/AddItemForm'\r\nimport s from './Todolist.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {StateType} from '../../store/store'\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC, sortTasksByNameAC\r\n} from '../../store/actions/tasks-actions/tasks-actions'\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC, changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from '../../store/actions/todolists-actions/todolists-actions'\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport const TodolistsContainer = () => {\r\n    const tasks = useSelector<StateType, TasksType>(state => state.tasks)\r\n\r\n    const todolists = useSelector<StateType, TodolistType[]>(state => state.todolists)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((taskID: string, TODOLIST_ID: string) => {\r\n        dispatch(removeTaskAC(taskID, TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, TODOLIST_ID: string) => {\r\n        dispatch(addTaskAC(title, TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, isDone: boolean, TODOLIST_ID: string) => {\r\n        dispatch(changeTaskStatusAC(taskID, isDone, TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, TODOLIST_ID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID, title, TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    const sortTasksByName = useCallback((TODOLIST_ID: string) => {\r\n        dispatch(sortTasksByNameAC(TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((TODOLIST_ID: string) => {\r\n        dispatch(removeTodolistAC(TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistFilter = useCallback((filter: FilterValuesType, TODOLIST_ID: string) => {\r\n        dispatch(changeTodolistFilterAC(filter, TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, TODOLIST_ID: string) => {\r\n        dispatch(changeTodolistTitleAC(title, TODOLIST_ID))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <div className={s.addTodolistContainer}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </div>\r\n\r\n            <div className={s.todolistsWrapper}>\r\n                {todolists.map(tdl =>\r\n                    <Todolist\r\n                        key={tdl.id}\r\n                        TODOLIST_ID={tdl.id}\r\n                        title={tdl.title}\r\n                        filter={tdl.filter}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodolistFilter={changeTodolistFilter}\r\n                        removeTodolist={removeTodolist}\r\n                        tasks={tasks[tdl.id]}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        sortTasksByName={sortTasksByName}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {TodolistType} from '../../../components/Todolist/TodolistsContainer'\r\nimport {\r\n    TodolistsActionsType,\r\n    ADD_TODOLIST,\r\n    CHANGE_TODOLIST_FILTER,\r\n    CHANGE_TODOLIST_TITLE,\r\n    REMOVE_TODOLIST\r\n} from '../../actions/todolists-actions/todolists-actions'\r\n\r\n/*export const TODOLIST_ID_1 = v1()\r\nexport const TODOLIST_ID_2 = v1()*/\r\n\r\n/*const initialState: TodolistType[] = [\r\n    {id: TODOLIST_ID_1, title: 'What to learn', filter: 'All'},\r\n    {id: TODOLIST_ID_2, title: 'What to buy', filter: 'All'}\r\n]*/\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistsReducer = (state: TodolistType[] = initialState, action: TodolistsActionsType): TodolistType[] => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return [...state.filter(tdl => tdl.id !== action.TODOLIST_ID)]\r\n\r\n        case ADD_TODOLIST:\r\n            return [\r\n                ...state,\r\n                {id: action.NEW_TODOLIST_ID, title: action.title, filter: 'All'}\r\n            ]\r\n\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return [...state.map(tdl => (tdl.id === action.TODOLIST_ID ? {...tdl, filter: action.filter} : tdl))]\r\n\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return [...state.map(tdl => (tdl.id === action.TODOLIST_ID ? {...tdl, title: action.title} : tdl))]\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {TasksType, TaskType} from '../../../components/Todolist/TodolistsContainer'\r\nimport {v1} from 'uuid'\r\nimport {\r\n    ADD_TASK,\r\n    CHANGE_TASK_STATUS,\r\n    CHANGE_TASK_TITLE,\r\n    REMOVE_TASK,\r\n    SORT_TASKS_BY_NAME,\r\n    TasksActionsType\r\n} from '../../actions/tasks-actions/tasks-actions'\r\nimport {ADD_TODOLIST, REMOVE_TODOLIST} from '../../actions/todolists-actions/todolists-actions'\r\n\r\n/*const initialState: TasksType = {\r\n    [TODOLIST_ID_1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'ReactJS', isDone: false},\r\n        {id: v1(), title: 'Rest API', isDone: false},\r\n        {id: v1(), title: 'GraphQL', isDone: false}\r\n    ],\r\n\r\n    [TODOLIST_ID_2]: [\r\n        {id: v1(), title: 'Beer', isDone: true},\r\n        {id: v1(), title: 'Milk', isDone: true},\r\n        {id: v1(), title: 'Cola', isDone: false},\r\n        {id: v1(), title: 'Bread', isDone: false},\r\n        {id: v1(), title: 'Smoke', isDone: true}\r\n    ]\r\n}*/\r\n\r\nconst initialState: TasksType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: TasksActionsType): TasksType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.TODOLIST_ID]: state[action.TODOLIST_ID].filter(t => t.id !== action.taskID)\r\n            }\r\n\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                [action.TODOLIST_ID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.TODOLIST_ID]]\r\n            }\r\n\r\n        case CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.TODOLIST_ID]: state[action.TODOLIST_ID]\r\n                    .map(t => (t.id === action.taskID ? {...t, isDone: action.isDone} : t))\r\n            }\r\n\r\n        case CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.TODOLIST_ID]: state[action.TODOLIST_ID]\r\n                    .map(t => (t.id === action.taskID ? {...t, title: action.title} : t))\r\n            }\r\n\r\n        case SORT_TASKS_BY_NAME:\r\n            return {\r\n                ...state,\r\n                [action.TODOLIST_ID]: [...state[action.TODOLIST_ID]]\r\n                    .sort((a: TaskType, b: TaskType) => a['title'] > b['title'] ? 1 : -1)\r\n            }\r\n\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                [action.NEW_TODOLIST_ID]: []\r\n            }\r\n\r\n        case REMOVE_TODOLIST:\r\n            /*const stateCopy = {...state}\r\n            delete stateCopy[action.TODOLIST_ID]*/\r\n            const {[action.TODOLIST_ID]: any, ...newState} = state\r\n            return newState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from 'redux'\r\nimport {todolistsReducer} from './reducers/todolists-reducer/todolists-reducer'\r\nimport {tasksReducer} from './reducers/tasks-reducer/tasks-reducer'\r\nimport {loadState, saveState} from '../utils/local-storage-utils'\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        todolists: todolistsReducer,\r\n        tasks: tasksReducer\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState())\r\n})","import {StateType} from '../store/store'\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const preloadedState = localStorage.getItem('todolistState')\r\n        return preloadedState === null ? undefined : JSON.parse(preloadedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: StateType) => {\r\n    try {\r\n        const loadedState = JSON.stringify(state)\r\n        localStorage.setItem('todolistState', loadedState)\r\n    } catch {\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {TodolistsContainer} from './components/Todolist/TodolistsContainer'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './store/store'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <TodolistsContainer/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__30-Gc\",\"grouped\":\"Button_grouped__1qQvh\",\"active\":\"Button_active__2ym-I\",\"icon\":\"Button_icon___Tuok\"};"],"sourceRoot":""}