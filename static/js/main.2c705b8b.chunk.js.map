{"version":3,"sources":["components/UI/Input/Input.module.css","components/Todolist/AddItemForm/AddItemForm.module.css","components/UI/Checkbox/Checkbox.module.css","components/Todolist/Todolist.module.css","components/UI/Button/Button.tsx","components/UI/Input/Input.tsx","components/Todolist/AddItemForm/AddItemForm.tsx","components/Todolist/EditableSpan/EditableSpan.tsx","components/UI/Checkbox/Checkbox.tsx","components/UI/Button/IconButton.tsx","components/Icons/Delete/Delete.tsx","components/Todolist/Todolist.tsx","store/actions/tasks-actions/tasks-actions.ts","store/actions/todolists-actions/todolists-actions.ts","components/Todolist/TodolistContainer.tsx","store/reducers/todolists-reducer/todolists-reducer.ts","store/reducers/tasks-reducer/tasks-reducer.ts","store/store.ts","utils/local-storage-utils.ts","index.tsx","components/UI/Button/Button.module.css"],"names":["module","exports","Button","active","grouped","className","restProps","finalClassName","s","default","Input","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","errorMessage","finalInputClassName","inputError","input","container","e","currentTarget","value","key","placeholder","AddItemForm","props","useState","title","setTitle","setError","onClickHandler","trim","addItem","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Checkbox","checked","changeStatus","checkbox","IconButton","icon","Delete","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","Todolist","changeTodolistFilter","filter","TODOLIST_ID","todolistContainer","titleContainer","changeTodolistTitle","removeTodolist","addTaskContainer","addTask","tasksToRender","map","t","taskContentContainer","taskContent","isDone","changeTaskStatus","id","changeTaskTitle","removeTask","buttonsContainer","sortTasksByName","REMOVE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","SORT_TASKS_BY_NAME","REMOVE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_FILTER","CHANGE_TODOLIST_TITLE","TodolistContainer","tasks","useSelector","state","todolists","dispatch","useDispatch","taskID","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","sortTasksByNameAC","removeTodolistAC","changeTodolistFilterAC","changeTodolistTitleAC","todolist","addTodolistContainer","NEW_TODOLIST_ID","v1","addTodolistAC","todolistsWrapper","TODOLIST_ID_1","TODOLIST_ID_2","initialState","rootReducer","combineReducers","action","tdl","newTodolist","newTask","sort","a","b","newState","store","createStore","preloadedState","localStorage","getItem","undefined","JSON","parse","err","loadState","subscribe","loadedState","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c705b8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__1azzw\",\"input\":\"Input_input__2HRDK\",\"inputError\":\"Input_inputError__1hcoG\",\"errorMessage\":\"Input_errorMessage__1nrIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddItemForm_container__3kUTm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__1Umq4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistsWrapper\":\"Todolist_todolistsWrapper__2YSuQ\",\"addTodolistContainer\":\"Todolist_addTodolistContainer__3N228\",\"todolistContainer\":\"Todolist_todolistContainer__3n5Qj\",\"buttonsContainer\":\"Todolist_buttonsContainer__2chum\",\"titleContainer\":\"Todolist_titleContainer__2mDXL\",\"addTaskContainer\":\"Todolist_addTaskContainer__Ap9Ba\",\"taskContentContainer\":\"Todolist_taskContentContainer__1mlvg\",\"taskContent\":\"Todolist_taskContent__2Bn5E\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    active?: boolean\r\n    grouped?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (\r\n    {\r\n        active,\r\n        grouped,\r\n        className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${s.default} ${active ? s.active : ''} ${grouped ? s.grouped : ''} ${className ? className : ''}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './Input.module.css'\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (\r\n    {\r\n        type,\r\n        onChange,\r\n        onChangeText,\r\n        onKeyPress,\r\n        onEnter,\r\n        error,\r\n        className,\r\n        spanClassName,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.errorMessage} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.inputError : ''} ${s.input} ${className ? className : ''}`\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                placeholder={'Введите текст...'}\r\n                {...restProps}\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Button} from '../../UI/Button/Button'\r\nimport {Input} from '../../UI/Input/Input'\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype InputPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: InputPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickHandler = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setTitle('')\r\n            setError(true)\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <Input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error ? 'Field is required' : ''}/>\r\n            <Button onClick={onClickHandler}>Add</Button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Input} from '../../UI/Input/Input'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <Input value={title}\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport s from './Checkbox.module.css'\r\n\r\ntype CheckboxPropsType = {\r\n    checked: boolean\r\n    changeStatus: (isDone: boolean) => void\r\n}\r\n\r\nexport const Checkbox = (props: CheckboxPropsType) => {\r\n    const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(e.currentTarget.checked)\r\n    }\r\n    return <input type='checkbox' checked={props.checked} onChange={onCheckboxChangeHandler} className={s.checkbox}/>\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype IconButtonPropsType = DefaultButtonPropsType & {}\r\n\r\nexport const IconButton: React.FC<IconButtonPropsType> = (\r\n    {\r\n        className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${s.icon} ${className ? className : ''}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport const Delete = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n             stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n             className=\"feather feather-x\">\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n        </svg>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Todolist.module.css'\r\nimport {FilterValuesType, TaskType, TodolistType} from './TodolistContainer'\r\nimport {AddItemForm} from './AddItemForm/AddItemForm'\r\nimport {EditableSpan} from './EditableSpan/EditableSpan'\r\nimport {Button} from '../UI/Button/Button'\r\nimport {Checkbox} from '../UI/Checkbox/Checkbox'\r\nimport {IconButton} from '../UI/Button/IconButton'\r\nimport {Delete} from '../Icons/Delete/Delete'\r\nimport {useSelector} from 'react-redux'\r\nimport {StateType} from '../../store/store'\r\n\r\ntype TodolistPropsType = {\r\n    TODOLIST_ID: string\r\n    title: string\r\n    tasksToRender: TaskType[]\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, TODOLIST_ID: string) => void\r\n    addTask: (title: string, TODOLIST_ID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, TODOLIST_ID: string) => void\r\n    changeTodolistFilter: (filter: FilterValuesType, TODOLIST_ID: string) => void\r\n    removeTodolist: (TODOLIST_ID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, TODOLIST_ID: string) => void\r\n    changeTodolistTitle: (title: string, TODOLIST_ID: string) => void\r\n    sortTasksByName: (TODOLIST_ID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = (props) => {\r\n    const changeTodolistFilter = (filter: FilterValuesType) => props.changeTodolistFilter(filter, props.TODOLIST_ID)\r\n    const removeTodolist = () => props.removeTodolist(props.TODOLIST_ID)\r\n    const addTask = (title: string) => props.addTask(title, props.TODOLIST_ID)\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.TODOLIST_ID)\r\n    const sortTasksByName = () => props.sortTasksByName(props.TODOLIST_ID)\r\n\r\n    return (\r\n        <div className={s.todolistContainer}>\r\n            <div className={s.titleContainer}>\r\n                <EditableSpan title={props.title}\r\n                              changeTitle={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}><Delete/></IconButton>\r\n            </div>\r\n\r\n            <div className={s.addTaskContainer}>\r\n                <AddItemForm addItem={addTask}/>\r\n            </div>\r\n            <div>\r\n                {props.tasksToRender.map(t => {\r\n                    const removeTask = () => props.removeTask(t.id, props.TODOLIST_ID)\r\n                    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.TODOLIST_ID)\r\n                    const changeTaskStatus = (isDone: boolean) => {\r\n                        props.changeTaskStatus(t.id, isDone, props.TODOLIST_ID)\r\n                    }\r\n\r\n                    return (\r\n                        <div key={t.id}>\r\n                            <div className={s.taskContentContainer}>\r\n                                <div className={s.taskContent}>\r\n                                    <Checkbox checked={t.isDone}\r\n                                              changeStatus={changeTaskStatus}/>\r\n\r\n                                    <EditableSpan title={t.title}\r\n                                                  changeTitle={changeTaskTitle}/>\r\n                                </div>\r\n                                <IconButton onClick={removeTask}><Delete/></IconButton>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n            <div className={s.buttonsContainer}>\r\n                <Button onClick={() => changeTodolistFilter('All')}\r\n                        active={props.filter === 'All'}\r\n                        grouped>\r\n                    All\r\n                </Button>\r\n                <Button onClick={() => changeTodolistFilter('Active')}\r\n                        active={props.filter === 'Active'}\r\n                        grouped>\r\n                    Active\r\n                </Button>\r\n                <Button onClick={() => changeTodolistFilter('Completed')}\r\n                        active={props.filter === 'Completed'}\r\n                        grouped>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n            <div className={s.buttonsContainer}>\r\n                <Button onClick={sortTasksByName}\r\n                        grouped>\r\n                    Sort by name\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {addTodolistAC, removeTodolistAC} from '../todolists-actions/todolists-actions'\r\n\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const ADD_TASK = 'ADD_TASK'\r\nexport const CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS'\r\nexport const CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\r\nexport const SORT_TASKS_BY_NAME = 'SORT_TASKS_BY_NAME'\r\n\r\nexport const removeTaskAC = (taskID: string, TODOLIST_ID: string) => (\r\n    {type: REMOVE_TASK, taskID, TODOLIST_ID}\r\n) as const\r\nexport const addTaskAC = (title: string, TODOLIST_ID: string) => (\r\n    {type: ADD_TASK, title, TODOLIST_ID}\r\n) as const\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TASK_STATUS, taskID, isDone, TODOLIST_ID}\r\n) as const\r\nexport const changeTaskTitleAC = (taskID: string, title: string, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TASK_TITLE, taskID, title, TODOLIST_ID}\r\n) as const\r\nexport const sortTasksByNameAC = (TODOLIST_ID: string) => (\r\n    {type: SORT_TASKS_BY_NAME, TODOLIST_ID}\r\n) as const\r\n\r\nexport type TasksActionsType =\r\n    ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof changeTaskStatusAC> |\r\n    ReturnType<typeof changeTaskTitleAC> |\r\n    ReturnType<typeof sortTasksByNameAC> |\r\n    ReturnType<typeof addTodolistAC> |\r\n    ReturnType<typeof removeTodolistAC>","import {v1} from 'uuid'\r\nimport {FilterValuesType} from '../../../components/Todolist/TodolistContainer'\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nexport const ADD_TODOLIST = 'ADD_TODOLIST'\r\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER'\r\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\r\n\r\nexport const removeTodolistAC = (TODOLIST_ID: string) => (\r\n    {type: REMOVE_TODOLIST, TODOLIST_ID}\r\n) as const\r\n\r\nexport const addTodolistAC = (title: string) => (\r\n    {type: ADD_TODOLIST, title, NEW_TODOLIST_ID: v1()}\r\n) as const\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TODOLIST_FILTER, filter, TODOLIST_ID}\r\n) as const\r\n\r\nexport const changeTodolistTitleAC = (title: string, TODOLIST_ID: string) => (\r\n    {type: CHANGE_TODOLIST_TITLE, title, TODOLIST_ID}\r\n) as const\r\n\r\nexport type TodolistsActionsType =\r\n    ReturnType<typeof removeTodolistAC> |\r\n    ReturnType<typeof addTodolistAC> |\r\n    ReturnType<typeof changeTodolistFilterAC> |\r\n    ReturnType<typeof changeTodolistTitleAC>","import React from 'react'\r\nimport {Todolist} from './Todolist'\r\nimport {AddItemForm} from './AddItemForm/AddItemForm'\r\nimport s from './Todolist.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {StateType} from '../../store/store'\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC, sortTasksByNameAC\r\n} from '../../store/actions/tasks-actions/tasks-actions'\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC, changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from '../../store/actions/todolists-actions/todolists-actions'\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport const TodolistContainer = () => {\r\n    const tasks = useSelector<StateType, TasksType>(state => state.tasks)\r\n    const todolists = useSelector<StateType, TodolistType[]>(state => state.todolists)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = (taskID: string, TODOLIST_ID: string) => {\r\n        dispatch(removeTaskAC(taskID, TODOLIST_ID))\r\n    }\r\n\r\n    const addTask = (title: string, TODOLIST_ID: string) => {\r\n        dispatch(addTaskAC(title, TODOLIST_ID))\r\n    }\r\n\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, TODOLIST_ID: string) => {\r\n        dispatch(changeTaskStatusAC(taskID, isDone, TODOLIST_ID))\r\n    }\r\n\r\n    const changeTaskTitle = (taskID: string, title: string, TODOLIST_ID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID, title, TODOLIST_ID))\r\n    }\r\n\r\n    const sortTasksByName = (TODOLIST_ID: string) => {\r\n        dispatch(sortTasksByNameAC(TODOLIST_ID))\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }\r\n\r\n    const removeTodolist = (TODOLIST_ID: string) => {\r\n        dispatch(removeTodolistAC(TODOLIST_ID))\r\n    }\r\n\r\n    const changeTodolistFilter = (filter: FilterValuesType, TODOLIST_ID: string) => {\r\n        dispatch(changeTodolistFilterAC(filter, TODOLIST_ID))\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string, TODOLIST_ID: string) => {\r\n        dispatch(changeTodolistTitleAC(title, TODOLIST_ID))\r\n    }\r\n\r\n    const tasksToRender = (todolist: TodolistType): TaskType[] => {\r\n        switch (todolist.filter) {\r\n            case 'Completed':\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            case 'Active':\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <div className={s.addTodolistContainer}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </div>\r\n\r\n            <div className={s.todolistsWrapper}>\r\n                {todolists.map(todolist =>\r\n                    <Todolist\r\n                        key={todolist.id}\r\n                        TODOLIST_ID={todolist.id}\r\n                        title={todolist.title}\r\n                        filter={todolist.filter}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodolistFilter={changeTodolistFilter}\r\n                        removeTodolist={removeTodolist}\r\n                        tasksToRender={tasksToRender(todolist)}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        sortTasksByName={sortTasksByName}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {TodolistType} from '../../../components/Todolist/TodolistContainer'\r\nimport {\r\n    TodolistsActionsType,\r\n    ADD_TODOLIST,\r\n    CHANGE_TODOLIST_FILTER,\r\n    CHANGE_TODOLIST_TITLE,\r\n    REMOVE_TODOLIST\r\n} from '../../actions/todolists-actions/todolists-actions'\r\nimport {v1} from 'uuid'\r\n\r\nexport const TODOLIST_ID_1 = v1()\r\nexport const TODOLIST_ID_2 = v1()\r\n\r\nconst initialState: TodolistType[] = [\r\n    {id: TODOLIST_ID_1, title: 'What to learn', filter: 'All'},\r\n    {id: TODOLIST_ID_2, title: 'What to buy', filter: 'All'}\r\n]\r\n\r\nexport const todolistsReducer = (state: TodolistType[] = initialState, action: TodolistsActionsType): TodolistType[] => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return [...state.filter(tdl => tdl.id !== action.TODOLIST_ID)]\r\n\r\n        case ADD_TODOLIST:\r\n            const newTodolist: TodolistType = {id: action.NEW_TODOLIST_ID, title: action.title, filter: 'All'}\r\n            return [...state, newTodolist]\r\n\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return [...state.map(tdl => (tdl.id === action.TODOLIST_ID ? {...tdl, filter: action.filter} : tdl))]\r\n\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return [...state.map(tdl => (tdl.id === action.TODOLIST_ID ? {...tdl, title: action.title} : tdl))]\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {TasksType, TaskType} from '../../../components/Todolist/TodolistContainer'\r\nimport {v1} from 'uuid'\r\nimport {\r\n    ADD_TASK,\r\n    CHANGE_TASK_STATUS,\r\n    CHANGE_TASK_TITLE,\r\n    REMOVE_TASK,\r\n    SORT_TASKS_BY_NAME,\r\n    TasksActionsType\r\n} from '../../actions/tasks-actions/tasks-actions'\r\nimport {ADD_TODOLIST, REMOVE_TODOLIST} from '../../actions/todolists-actions/todolists-actions'\r\nimport {TODOLIST_ID_1, TODOLIST_ID_2} from '../todolists-reducer/todolists-reducer'\r\n\r\nconst initialState: TasksType = {\r\n    [TODOLIST_ID_1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'ReactJS', isDone: false},\r\n        {id: v1(), title: 'Rest API', isDone: false},\r\n        {id: v1(), title: 'GraphQL', isDone: false}\r\n    ],\r\n\r\n    [TODOLIST_ID_2]: [\r\n        {id: v1(), title: 'Beer', isDone: true},\r\n        {id: v1(), title: 'Milk', isDone: true},\r\n        {id: v1(), title: 'Cola', isDone: false},\r\n        {id: v1(), title: 'Bread', isDone: false},\r\n        {id: v1(), title: 'Smoke', isDone: true}\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: TasksActionsType): TasksType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state, [action.TODOLIST_ID]: state[action.TODOLIST_ID]\r\n                    .filter(t => t.id !== action.taskID)\r\n            }\r\n\r\n        case ADD_TASK:\r\n            const newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.TODOLIST_ID]: [newTask, ...state[action.TODOLIST_ID]]}\r\n\r\n        case CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state, [action.TODOLIST_ID]: state[action.TODOLIST_ID]\r\n                    .map(t => (t.id === action.taskID\r\n                        ? {...t, isDone: action.isDone} : t))\r\n            }\r\n\r\n        case CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state, [action.TODOLIST_ID]: state[action.TODOLIST_ID]\r\n                    .map(t => (t.id === action.taskID\r\n                        ? {...t, title: action.title} : t))\r\n            }\r\n\r\n        case SORT_TASKS_BY_NAME:\r\n            return {\r\n                ...state,\r\n                [action.TODOLIST_ID]: state[action.TODOLIST_ID]\r\n                    .sort((a: TaskType, b: TaskType) => a['title'] > b['title'] ? 1 : -1)\r\n            }\r\n\r\n        case ADD_TODOLIST:\r\n            return {...state, [action.NEW_TODOLIST_ID]: []}\r\n\r\n        case REMOVE_TODOLIST:\r\n            /*const stateCopy = {...state}\r\n            delete stateCopy[action.TODOLIST_ID]*/\r\n            const {[action.TODOLIST_ID]: any, ...newState} = state\r\n            return newState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from 'redux'\r\nimport {todolistsReducer} from './reducers/todolists-reducer/todolists-reducer'\r\nimport {tasksReducer} from './reducers/tasks-reducer/tasks-reducer'\r\nimport {loadState, saveState} from '../utils/local-storage-utils'\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        todolists: todolistsReducer,\r\n        tasks: tasksReducer\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState())\r\n})","import {StateType} from '../store/store'\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const preloadedState = localStorage.getItem('todolistState')\r\n        return preloadedState === null ? undefined : JSON.parse(preloadedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: StateType) => {\r\n    try {\r\n        const loadedState = JSON.stringify(state)\r\n        localStorage.setItem('todolistState', loadedState)\r\n    } catch {\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {TodolistContainer} from './components/Todolist/TodolistContainer'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './store/store'\r\nimport {TodolistContainerWithUseReducer} from './components/Todolist/TodolistContainerWithUseReducer'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <TodolistContainer/>\r\n            {/*<TodolistContainerWithUseReducer/>*/}\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__30-Gc\",\"grouped\":\"Button_grouped__1qQvh\",\"active\":\"Button_active__2ym-I\",\"icon\":\"Button_icon___Tuok\"};"],"sourceRoot":""}