{"version":3,"sources":["components/TrashIcon.tsx","components/Button.tsx","components/Input.tsx","components/Checkbox.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["TrashIcon","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","points","d","x1","y1","x2","y2","Button","props","finalButtonClassName","filter","value","onClick","icon","Input","useState","title","setTitle","error","setError","onClickHandler","trim","addTask","id","onChange","e","currentTarget","onKeyPress","key","placeholder","Checkbox","type","checked","changeStatus","Todolist","changeTodolistFilterHandler","changeTodolistFilter","TODOLIST_ID","removeTodolist","tasksToRender","map","t","isDone","changeTaskStatus","removeTask","TODOLIST_ID_1","v1","TODOLIST_ID_2","App","todolists","setTodolists","tasks","setTasks","useEffect","todolistsString","localStorage","getItem","todolistsInit","JSON","parse","tasksString","tasksInit","setItem","stringify","taskID","newTask","todolist","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56322cee.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const TrashIcon = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n             stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n             className=\"feather feather-trash-2\">\r\n            <polyline points=\"3 6 5 6 21 6\"/>\r\n            <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"/>\r\n            <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"/>\r\n            <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"/>\r\n        </svg>\r\n    )\r\n}","import React from 'react'\r\nimport {FilterValuesType} from '../App'\r\nimport {TrashIcon} from \"./TrashIcon\";\r\n\r\ntype ButtonPropsType = {\r\n    value: string\r\n    onClick: () => void\r\n    className?: string | undefined\r\n    filter?: FilterValuesType\r\n    icon?: string\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    const finalButtonClassName = `${props.filter === props.value ? 'activeButton' : ''} ${props.className}`\r\n\r\n    return (\r\n        <button onClick={props.onClick}\r\n                className={finalButtonClassName}>\r\n            {props.icon ? <TrashIcon/> : props.value}\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Button} from \"./Button\";\r\n\r\ntype InputPropsType = {\r\n    addTask: (title: string, todolistID: string) => void\r\n    id: string\r\n}\r\n\r\nexport function Input(props: InputPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        if (title.trim()) {\r\n            props.addTask(title.trim(), props.id)\r\n            setTitle('')\r\n        } else {\r\n            setTitle('')\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={'inputDataContainer'}>\r\n                <input onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       value={title}\r\n                       className={error ? 'dataInput error' : 'dataInput'}\r\n                       placeholder={'What to add?'}\r\n                />\r\n                <Button value={'Add'} onClick={onClickHandler}/>\r\n            </div>\r\n            {error && <div className={'errorMessage'}>Field is required</div>}\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react'\r\n\r\ntype CheckboxPropsType = {\r\n    checked: boolean\r\n    changeStatus: (isDone: boolean) => void\r\n}\r\n\r\nexport const Checkbox = (props: CheckboxPropsType) => {\r\n    const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(e.currentTarget.checked)\r\n    }\r\n    return <input type='checkbox' checked={props.checked} onChange={onCheckboxChangeHandler} className={'checkbox'}/>\r\n}\r\n","import React from 'react'\r\nimport {FilterValuesType, TaskType} from './App'\r\nimport {Button} from './components/Button'\r\nimport {Input} from './components/Input'\r\nimport {Checkbox} from './components/Checkbox'\r\n\r\ntype TodolistPropsType = {\r\n    TODOLIST_ID: string\r\n    title: string\r\n    tasksToRender: TaskType[]\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n    changeTodolistFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = (props) => {\r\n\r\n    const changeTodolistFilterHandler = (filter: FilterValuesType) => props.changeTodolistFilter(filter, props.TODOLIST_ID)\r\n    const removeTodolistHandler = () => props.removeTodolist(props.TODOLIST_ID)\r\n\r\n    return (\r\n        <div className={'todolistContainer'}>\r\n\r\n            {/*Header*/}\r\n            <div className={'todolistHeaderWrapper'}>\r\n                <div className={'todolistHeaderContainer'}>\r\n                    <h2 className={'todolistTitle'}>{props.title}</h2>\r\n                    <Button value={'x'}\r\n                            className={'deleteButton'}\r\n                            onClick={removeTodolistHandler}\r\n                            icon={'TrashIcon'}\r\n                    />\r\n                </div>\r\n                <Input addTask={props.addTask} id={props.TODOLIST_ID}/>\r\n            </div>\r\n\r\n            {/*Container with tasks*/}\r\n            <ul className={'tasksContainer'}>\r\n                {props.tasksToRender.map(t => {\r\n                    const removeTaskHandler = () => props.removeTask(t.id, props.TODOLIST_ID)\r\n                    const changeTaskStatusHandler = (isDone: boolean) => props.changeTaskStatus(t.id, isDone, props.TODOLIST_ID)\r\n\r\n                    return (\r\n                        <li key={t.id} className={'singleTaskContainer'}>\r\n                            <Checkbox checked={t.isDone} changeStatus={changeTaskStatusHandler}/>\r\n                            <span className={t.isDone ? 'completed' : ''}>{t.title}</span>\r\n                            <Button value={'x'}\r\n                                    onClick={removeTaskHandler}\r\n                                    className={'deleteButton'}\r\n                                    icon={'TrashIcon'}/>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n            {/*Footer*/}\r\n            <div className={'filterButtonsContainer'}>\r\n                <Button value={'All'}\r\n                        onClick={() => changeTodolistFilterHandler('All')}\r\n                        filter={props.filter}\r\n                />\r\n\r\n                <Button value={'Active'}\r\n                        onClick={() => changeTodolistFilterHandler('Active')}\r\n                        filter={props.filter}\r\n                />\r\n\r\n                <Button value={'Completed'}\r\n                        onClick={() => changeTodolistFilterHandler('Completed')}\r\n                        filter={props.filter}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './Todolist'\r\nimport {v1} from 'uuid'\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst TODOLIST_ID_1 = v1()\r\nconst TODOLIST_ID_2 = v1()\r\n\r\nexport const App = () => {\r\n    // Data\r\n    const [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: TODOLIST_ID_1, title: 'What to Learn', filter: 'All'},\r\n        {id: TODOLIST_ID_2, title: 'What to Buy', filter: 'All'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [TODOLIST_ID_1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ],\r\n\r\n        [TODOLIST_ID_2]: [\r\n            {id: v1(), title: 'Beer', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Cola', isDone: false},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Smoke', isDone: true},\r\n        ],\r\n    })\r\n\r\n    // Local Storage\r\n    useEffect(() => {\r\n        const todolistsString = localStorage.getItem('todolists')\r\n        if (todolistsString) {\r\n            const todolistsInit = JSON.parse(todolistsString)\r\n            setTodolists(todolistsInit)\r\n        }\r\n\r\n        const tasksString = localStorage.getItem('tasks')\r\n        if (tasksString) {\r\n            const tasksInit = JSON.parse(tasksString)\r\n            setTasks(tasksInit)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todolists', JSON.stringify(todolists))\r\n        localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    }, [todolists, tasks])\r\n\r\n\r\n    // Actions\r\n    const removeTask = (taskID: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addTask = (title: string, TODOLIST_ID: string) => {\r\n        const newTask = {id: v1(), title: title, isDone: false}\r\n        tasks[TODOLIST_ID] = [newTask, ...tasks[TODOLIST_ID]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, isDone} : t))\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const changeTodolistFilter = (filter: FilterValuesType, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(todolist => (todolist.id === TODOLIST_ID ? {...todolist, filter: filter} : todolist)))\r\n    }\r\n\r\n    const removeTodolist = (TODOLIST_ID: string) => {\r\n        setTodolists(todolists.filter(todolist => todolist.id !== TODOLIST_ID))\r\n        delete tasks[TODOLIST_ID]\r\n    }\r\n\r\n    const tasksToRender = (todolist: TodolistType): TaskType[] => {\r\n        switch (todolist.filter) {\r\n            case 'Completed':\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            case 'Active':\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n\r\n    // JSX\r\n    return (\r\n        <div className='App'>\r\n            {todolists.map(todolist => {\r\n                return (\r\n                    <Todolist\r\n                        key={todolist.id}\r\n                        TODOLIST_ID={todolist.id}\r\n                        title={todolist.title}\r\n                        filter={todolist.filter}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodolistFilter={changeTodolistFilter}\r\n                        removeTodolist={removeTodolist}\r\n                        tasksToRender={tasksToRender(todolist)}/>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}