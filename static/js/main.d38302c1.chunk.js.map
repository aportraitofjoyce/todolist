{"version":3,"sources":["pages/Todolists/Todolists.module.css","components/UI/Button/Button.module.css","components/UI/Input/Input.module.css","components/Navigation/Navigation.module.css","components/UI/Alerts/Alerts.module.css","components/UI/Checkbox/Checkbox.module.css","components/UI/Progress/Progress.module.css","components/UI/AddItemForm/AddItemForm.module.css","pages/Error/Error.module.css","types/server-response-types.ts","store/reducers/app-reducer/app-reducer.ts","api/axios-instance.ts","api/todolists-api.ts","utils/error-utils.ts","routes/routes.ts","store/reducers/todolists-reducer/todolists-reducer.ts","api/tasks-api.ts","store/reducers/tasks-reducer/tasks-reducer.ts","api/auth-api.ts","store/reducers/auth-reducer/auth-reducer.ts","store/store.ts","hooks/hooks.ts","components/UI/Button/Button.tsx","components/Icons/Eye.tsx","components/UI/Input/Input.tsx","components/UI/AddItemForm/AddItemForm.tsx","components/UI/EditableSpan/EditableSpan.tsx","components/UI/Button/IconButton.tsx","components/Icons/Delete.tsx","components/UI/Checkbox/Checkbox.tsx","pages/Todolists/Task.tsx","pages/Todolists/Todolist.tsx","pages/Todolists/Todolists.tsx","pages/Home/Home.tsx","pages/Login/Login.tsx","pages/Error/Error.tsx","components/UI/Progress/Progress.tsx","app/AppRouter.tsx","components/Navigation/Navigation.tsx","components/UI/Alerts/Alert.tsx","components/UI/Alerts/AlertError.tsx","components/UI/Alerts/Alerts.tsx","app/App.tsx","index.tsx"],"names":["module","exports","ServerStatuses","TaskStatuses","slice","createSlice","name","initialState","isLoading","error","isInitialized","reducers","setAppIsLoading","state","action","payload","status","setAppError","setAppInitialized","appReducer","reducer","actions","axiosInstance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","then","response","data","title","post","id","put","delete","PATH","networkErrorsHandler","message","dispatch","serverErrorsHandler","messages","fetchTodolists","createAsyncThunk","arg","thunkAPI","a","setTodolists","todolists","deleteTodolist","todolistID","resultCode","Success","removeTodolist","createTodolist","addTodolist","todolist","item","updateTodolistTitle","changeTodolistTitle","filter","tdl","entityStatus","changeTodolistFilter","map","todolistsReducer","tasksAPI","todoID","taskID","task","fetchTasks","tasks","items","deleteTask","createTask","updateTaskTitle","getState","find","updatedTask","updateTaskStatus","tasksReducer","extraReducers","builder","addCase","forEach","fulfilled","index","findIndex","t","splice","todoListId","unshift","authAPI","login","loginData","setIsLoggedIn","rejectWithValue","errors","fieldErrors","fieldsErrors","undefined","checkAuth","setAuthData","logout","isLoggedIn","authReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","useAppDispatch","useDispatch","Button","memo","active","grouped","className","disabled","rest","classNames","s","default","EyeIcon","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","cx","cy","r","Input","props","type","onChange","onChangeText","onKeyPress","onEnter","spanClassName","password","restProps","useState","isPassword","setIsPassword","finalSpanClassName","errorMessage","finalInputClassName","inputError","container","e","currentTarget","value","key","placeholder","eye","onClick","AddItemForm","addItem","setValue","setError","onChangeHandler","useCallback","onClickHandler","trim","onKeyPressHandler","EditableSpan","changeTitle","editMode","setEditMode","onEditMode","offEditMode","onBlur","autoFocus","onDoubleClick","IconButton","icon","Delete","x1","y1","x2","y2","Checkbox","onChangeCallback","children","checkbox","label","checked","Task","changeTaskStatusHandler","Completed","inProgress","changeTaskTitleHandler","removeTaskHandler","taskContentContainer","taskContent","Todolist","addTaskHandler","changeTodolistTitleHandler","removeTodolistHandler","changeFilterHandler","tasksToRender","useEffect","todolistContainer","titleContainer","addTaskContainer","buttonsContainer","Todolists","addTodolistHandler","addTodolistContainer","todolistsWrapper","to","LOGIN","routes","path","HOME","component","exact","TODOLIST","formik","useFormik","initialValues","email","rememberMe","validate","values","test","length","onSubmit","formikHelpers","style","marginTop","handleSubmit","display","flexDirection","gap","getFieldProps","touched","color","margin","href","rel","target","ERROR","history","useHistory","wrapper","src","alt","goBack","Progress","progressContainer","progressBar","AppRouter","from","EMPTY","Navigation","activeClassName","Alert","text","open","onClose","isOpen","setIsOpen","closeSnackbar","timeoutID","setTimeout","clearTimeout","AlertError","onCloseHandler","Alerts","alertsWrapper","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d38302c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistsWrapper\":\"Todolists_todolistsWrapper__TI3gB\",\"addTodolistContainer\":\"Todolists_addTodolistContainer__1cdOQ\",\"todolistContainer\":\"Todolists_todolistContainer__1I_ED\",\"buttonsContainer\":\"Todolists_buttonsContainer__2VmF0\",\"titleContainer\":\"Todolists_titleContainer__3Jbgy\",\"addTaskContainer\":\"Todolists_addTaskContainer__1tu1E\",\"taskContentContainer\":\"Todolists_taskContentContainer__1CVB8\",\"taskContent\":\"Todolists_taskContent__1cOJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__155K_\",\"icon\":\"Button_icon__3YoO_\",\"grouped\":\"Button_grouped__2fhOe\",\"active\":\"Button_active__3_huY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__24JuA\",\"inputError\":\"Input_inputError__vwjSN\",\"errorMessage\":\"Input_errorMessage__3CbEZ\",\"eye\":\"Input_eye__eCHIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Navigation_wrapper__2hK5a\",\"container\":\"Navigation_container__p5vR0\",\"active\":\"Navigation_active__HB2K8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertsWrapper\":\"Alerts_alertsWrapper__3IHyp\",\"container\":\"Alerts_container__3B1Mn\",\"show\":\"Alerts_show__CbhEe\",\"error\":\"Alerts_error__229Mn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Checkbox_label__R4tgA\",\"checkbox\":\"Checkbox_checkbox__1SuJM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressContainer\":\"Progress_progressContainer__2HjsN\",\"progressBar\":\"Progress_progressBar__1KmHj\",\"loading\":\"Progress_loading__1Okdl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddItemForm_container__6N7lY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Error_wrapper__1sZMS\"};","export type ServerResponse<T = {}> = {\r\n    resultCode: ServerStatuses\r\n    fieldsErrors: FieldsError[]\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\ntype FieldsError = {\r\n    field: string\r\n    error: string\r\n}\r\n\r\nexport enum ServerStatuses {\r\n    Success = 0,\r\n    Error = 1,\r\n    Captcha = 10\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    inProgress,\r\n    Completed,\r\n    Draft\r\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\ntype InitialState = {\r\n    isLoading: boolean\r\n    error: string\r\n    isInitialized: boolean\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        isLoading: false,\r\n        error: '',\r\n        isInitialized: false\r\n    } as InitialState,\r\n    reducers: {\r\n        setAppIsLoading: (state, action: PayloadAction<{ status: boolean }>) => {\r\n            state.isLoading = action.payload.status\r\n        },\r\n        setAppError: (state, action: PayloadAction<{ error: string }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitialized: (state, action: PayloadAction<{ status: boolean }>) => {\r\n            state.isInitialized = action.payload.status\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppIsLoading, setAppError, setAppInitialized} = slice.actions","import axios from 'axios'\r\n\r\nexport const axiosInstance = axios.create(\r\n    {\r\n        baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n        withCredentials: true,\r\n        headers: {'API-KEY': '6f228861-1f0c-43fb-a420-fcf28121de49'},\r\n    }\r\n)","import {axiosInstance} from './axios-instance'\r\nimport {ServerResponse} from '../types/server-response-types'\r\nimport {AxiosResponse} from 'axios'\r\n\r\nexport type TodolistsResponse = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists: () => axiosInstance\r\n        .get<TodolistsResponse[]>('/todo-lists')\r\n        .then(response => response.data),\r\n\r\n    createTodolist: (title: string) => axiosInstance\r\n        .post<{ title: string }, AxiosResponse<ServerResponse<{ item: TodolistsResponse }>>>('/todo-lists', {title})\r\n        .then(response => response.data),\r\n\r\n    updateTodolist: (id: string, title: string) => axiosInstance\r\n        .put<{ title: string }, AxiosResponse<ServerResponse>>(`/todo-lists/${id}`, {title})\r\n        .then(response => response.data),\r\n\r\n    deleteTodolist: (id: string) => axiosInstance\r\n        .delete<ServerResponse>(`/todo-lists/${id}`)\r\n        .then(response => response.data),\r\n}","import {ServerResponse} from '../types/server-response-types'\r\nimport {AppDispatch} from '../store/store'\r\nimport {setAppError} from '../store/reducers/app-reducer/app-reducer'\r\n\r\nexport const networkErrorsHandler = (message: string, dispatch: AppDispatch) => {\r\n    dispatch(setAppError({error: message}))\r\n}\r\n\r\nexport const serverErrorsHandler = <T>(response: ServerResponse<T>, dispatch: AppDispatch) => {\r\n    dispatch(setAppError({error: response.messages[0] || 'Unrecognized error'}))\r\n}","import {FC} from 'react'\r\nimport {Todolists} from '../pages/Todolists/Todolists'\r\nimport {Login} from '../pages/Login/Login'\r\nimport {Error} from '../pages/Error/Error'\r\nimport {Home} from '../pages/Home/Home'\r\n\r\nexport enum PATH {\r\n    HOME = '/',\r\n    EMPTY = '',\r\n    TODOLIST = '/todolist',\r\n    LOGIN = '/login',\r\n    ERROR = '/404'\r\n}\r\n\r\ntype Route = {\r\n    path: PATH\r\n    component: FC\r\n    exact?: boolean\r\n}\r\n\r\nexport const routes: Route[] = [\r\n    {path: PATH.HOME, component: Home, exact: true},\r\n    {path: PATH.TODOLIST, component: Todolists},\r\n    {path: PATH.LOGIN, component: Login},\r\n    {path: PATH.ERROR, component: Error},\r\n]","import {setAppIsLoading} from '../app-reducer/app-reducer'\r\nimport {todolistsAPI, TodolistsResponse} from '../../../api/todolists-api'\r\nimport {ServerStatuses} from '../../../types/server-response-types'\r\nimport {networkErrorsHandler, serverErrorsHandler} from '../../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nexport type TodolistType = TodolistsResponse & {\r\n    filter: FilterValues\r\n}\r\n\r\nexport type FilterValues = 'All' | 'Active' | 'Completed'\r\n\r\nexport const fetchTodolists = createAsyncThunk('todolists/fetchTodolists', async (arg, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setTodolists({todolists: response}))\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const deleteTodolist = createAsyncThunk('todolists/deleteTodolist', async (arg: { todolistID: string }, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await todolistsAPI.deleteTodolist(arg.todolistID)\r\n\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            thunkAPI.dispatch(removeTodolist({todolistID: arg.todolistID}))\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const createTodolist = createAsyncThunk('todolists/createTodolist', async (arg: { title: string }, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await todolistsAPI.createTodolist(arg.title)\r\n\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            thunkAPI.dispatch(addTodolist({todolist: response.data.item}))\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const updateTodolistTitle = createAsyncThunk('todolists/updateTodolistTitle', async (arg: { todolistID: string, title: string }, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await todolistsAPI.updateTodolist(arg.todolistID, arg.title)\r\n\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            thunkAPI.dispatch(changeTodolistTitle({todolistID: arg.todolistID, title: arg.title}))\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n        }\r\n\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: [] as TodolistType[],\r\n    reducers: {\r\n        removeTodolist: (state, action: PayloadAction<{ todolistID: string }>) => {\r\n            return state.filter(tdl => tdl.id !== action.payload.todolistID)\r\n        },\r\n        addTodolist: (state, action: PayloadAction<{ todolist: TodolistsResponse }>) => {\r\n            return [{...action.payload.todolist, filter: 'All', entityStatus: 'idle'}, ...state]\r\n        },\r\n        changeTodolistFilter: (state, action: PayloadAction<{ filter: FilterValues, todolistID: string }>) => {\r\n            return state.map(tdl => tdl.id === action.payload.todolistID\r\n                ? {...tdl, filter: action.payload.filter} : tdl)\r\n        },\r\n        changeTodolistTitle: (state, action: PayloadAction<{ todolistID: string, title: string }>) => {\r\n            return state.map(tdl => tdl.id === action.payload.todolistID\r\n                ? {...tdl, title: action.payload.title} : tdl)\r\n        },\r\n        setTodolists: (state, action: PayloadAction<{ todolists: TodolistsResponse[] }>) => {\r\n            return action.payload.todolists.map(tdl => ({...tdl, filter: 'All', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    removeTodolist,\r\n    addTodolist,\r\n    changeTodolistFilter,\r\n    changeTodolistTitle,\r\n    setTodolists,\r\n} = slice.actions","import {axiosInstance} from './axios-instance'\r\nimport {ServerResponse, TaskStatuses} from '../types/server-response-types'\r\nimport {AxiosResponse} from 'axios'\r\n\r\ntype GetTasksResponse = {\r\n    items: TaskResponse[]\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport type TaskResponse = {\r\n    title: string\r\n    status: TaskStatuses\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdatedTask = {\r\n    title: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks: (todoID: string) => axiosInstance\r\n        .get<GetTasksResponse>(`/todo-lists/${todoID}/tasks`)\r\n        .then(response => response.data),\r\n\r\n    createTask: (todoID: string, title: string) => axiosInstance\r\n        .post<{ title: string }, AxiosResponse<ServerResponse<{ item: TaskResponse }>>>(`/todo-lists/${todoID}/tasks`, {title})\r\n        .then(response => response.data),\r\n\r\n    updateTask: (todoID: string, taskID: string, task: UpdatedTask) => axiosInstance\r\n        .put<UpdatedTask, AxiosResponse<ServerResponse<{ item: TaskResponse }>>>(`/todo-lists/${todoID}/tasks/${taskID}`, task)\r\n        .then(response => response.data),\r\n\r\n    deleteTask: (taskID: string, todoID: string) => axiosInstance\r\n        .delete<ServerResponse>(`/todo-lists/${todoID}/tasks/${taskID}`)\r\n        .then(response => response.data),\r\n}","import {tasksAPI, TaskResponse, UpdatedTask} from '../../../api/tasks-api'\r\nimport {setAppIsLoading} from '../app-reducer/app-reducer'\r\nimport {ServerStatuses, TaskStatuses} from '../../../types/server-response-types'\r\nimport {networkErrorsHandler, serverErrorsHandler} from '../../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {addTodolist, removeTodolist, setTodolists} from '../todolists-reducer/todolists-reducer'\r\nimport {RootState} from '../../store'\r\n\r\nexport type Tasks = {\r\n    [key: string]: TaskResponse[]\r\n}\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (arg: { todolistID: string }, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await tasksAPI.getTasks(arg.todolistID)\r\n        return {tasks: response.items, todolistID: arg.todolistID}\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async (arg: { taskID: string, todolistID: string }, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await tasksAPI.deleteTask(arg.taskID, arg.todolistID)\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            return {taskID: arg.taskID, todolistID: arg.todolistID}\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const createTask = createAsyncThunk('tasks/createTask', async (arg: { todolistID: string, title: string }, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await tasksAPI.createTask(arg.todolistID, arg.title)\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            return {task: response.data.item}\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const updateTaskTitle = createAsyncThunk('tasks/updateTaskTitle', async (arg: { todolistID: string, taskID: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const state = thunkAPI.getState() as RootState\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const task = state.tasks[arg.todolistID].find(task => task.id === arg.taskID)\r\n\r\n        if (task) {\r\n            const updatedTask: UpdatedTask = {\r\n                status: task.status,\r\n                title: arg.title,\r\n            }\r\n\r\n            const response = await tasksAPI.updateTask(arg.todolistID, arg.taskID, updatedTask)\r\n\r\n            if (response.resultCode === ServerStatuses.Success) {\r\n                return {todolistID: arg.todolistID, taskID: arg.taskID, title: arg.title}\r\n            } else {\r\n                serverErrorsHandler(response, thunkAPI.dispatch)\r\n            }\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const updateTaskStatus = createAsyncThunk('tasks/updateTaskStatus', async (arg: { todolistID: string, taskID: string, status: TaskStatuses }, thunkAPI) => {\r\n    try {\r\n        const state = thunkAPI.getState() as RootState\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const task = state.tasks[arg.todolistID].find(task => task.id === arg.taskID)\r\n\r\n        if (task) {\r\n            const updatedTask: UpdatedTask = {\r\n                title: task.title,\r\n                status: arg.status\r\n            }\r\n\r\n            const response = await tasksAPI.updateTask(arg.todolistID, arg.taskID, updatedTask)\r\n\r\n            if (response.resultCode === ServerStatuses.Success) {\r\n                return {todolistID: arg.todolistID, taskID: arg.taskID, status: arg.status}\r\n            } else {\r\n                serverErrorsHandler(response, thunkAPI.dispatch)\r\n            }\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as Tasks,\r\n    reducers: {},\r\n    extraReducers: builder => builder\r\n        .addCase(setTodolists, (state, action) => {\r\n            action.payload.todolists.forEach(tdl => state[tdl.id] = [])\r\n        })\r\n\r\n        .addCase(addTodolist, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n\r\n        .addCase(removeTodolist, (state, action) => {\r\n            delete state[action.payload.todolistID]\r\n        })\r\n\r\n        .addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload!.todolistID] = action.payload!.tasks\r\n        })\r\n\r\n        .addCase(deleteTask.fulfilled, (state, action) => {\r\n            const index = state[action.payload!.todolistID].findIndex(t => t.id === action.payload!.taskID)\r\n            state[action.payload!.todolistID].splice(index, 1)\r\n        })\r\n\r\n        .addCase(createTask.fulfilled, (state, action) => {\r\n            state[action.payload!.task.todoListId].unshift(action.payload!.task)\r\n        })\r\n\r\n        .addCase(updateTaskStatus.fulfilled, (state, action) => {\r\n            return {\r\n                ...state,\r\n                [action.payload!.todolistID]: state[action.payload!.todolistID]\r\n                    .map(t => (t.id === action.payload!.taskID ? {...t, status: action.payload!.status} : t))\r\n            }\r\n        })\r\n\r\n        .addCase(updateTaskTitle.fulfilled, (state, action) => {\r\n            return {\r\n                ...state,\r\n                [action.payload!.todolistID]: state[action.payload!.todolistID]\r\n                    .map(t => (t.id === action.payload!.taskID ? {...t, title: action.payload!.title} : t))\r\n            }\r\n        })\r\n})\r\n\r\nexport const tasksReducer = slice.reducer","import {axiosInstance} from './axios-instance'\r\nimport {ServerResponse} from '../types/server-response-types'\r\nimport {AxiosResponse} from 'axios'\r\n\r\nexport type LoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type MeResponse = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login: (payload: LoginData) => axiosInstance\r\n        .post<LoginData, AxiosResponse<ServerResponse<{ userId: number }>>>('/auth/login', payload)\r\n        .then(response => response.data),\r\n\r\n    logout: () => axiosInstance\r\n        .delete<ServerResponse>('/auth/login')\r\n        .then(response => response.data),\r\n\r\n    me: () => axiosInstance\r\n        .get<ServerResponse<MeResponse>>('/auth/me')\r\n        .then(response => response.data)\r\n}","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {setAppInitialized, setAppIsLoading} from '../app-reducer/app-reducer'\r\nimport {authAPI, LoginData, MeResponse} from '../../../api/auth-api'\r\nimport {ServerStatuses} from '../../../types/server-response-types'\r\nimport {networkErrorsHandler, serverErrorsHandler} from '../../../utils/error-utils'\r\n\r\ntype InitialState = {\r\n    isLoggedIn: boolean\r\n    id?: number\r\n    email?: string\r\n    login?: string\r\n}\r\n\r\nexport const login = createAsyncThunk('auth/login', async (arg: { loginData: LoginData }, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await authAPI.login(arg.loginData)\r\n\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            thunkAPI.dispatch(setIsLoggedIn({status: true}))\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: response.messages, fieldErrors: response.fieldsErrors})\r\n        }\r\n    } catch (error) {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: error.messages, fieldErrors: undefined})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const checkAuth = createAsyncThunk('auth/checkAuth', async (arg, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await authAPI.me()\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            thunkAPI.dispatch(setIsLoggedIn({status: true}))\r\n            thunkAPI.dispatch(setAuthData({data: response.data}))\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppInitialized({status: true}))\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppIsLoading({status: true}))\r\n        const response = await authAPI.logout()\r\n        if (response.resultCode === ServerStatuses.Success) {\r\n            thunkAPI.dispatch(setIsLoggedIn({status: false}))\r\n        } else {\r\n            serverErrorsHandler(response, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch {\r\n        networkErrorsHandler('Network Error', thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppIsLoading({status: false}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    } as InitialState,\r\n    reducers: {\r\n        setIsLoggedIn: (state, action: PayloadAction<{ status: boolean }>) => {\r\n            state.isLoggedIn = action.payload.status\r\n        },\r\n        setAuthData: (state, action: PayloadAction<{ data: MeResponse }>) => {\r\n            return {...action.payload.data, isLoggedIn: true}\r\n        }\r\n    },\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nconst {setIsLoggedIn, setAuthData} = slice.actions","import {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {todolistsReducer} from './reducers/todolists-reducer/todolists-reducer'\r\nimport {tasksReducer} from './reducers/tasks-reducer/tasks-reducer'\r\nimport {appReducer} from './reducers/app-reducer/app-reducer'\r\nimport {authReducer} from './reducers/auth-reducer/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\r\nimport {AppDispatch, RootState} from '../store/store'\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","import React, {ButtonHTMLAttributes, DetailedHTMLProps, FC, memo} from 'react'\r\nimport s from './Button.module.css'\r\nimport {useAppSelector} from '../../../hooks/hooks'\r\n\r\nexport type DefaultButtonProps = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonProps = DefaultButtonProps & {\r\n    active?: boolean\r\n    grouped?: boolean\r\n}\r\n\r\nexport const Button: FC<ButtonProps> = memo(({active, grouped, className, disabled, ...rest}) => {\r\n    const isLoading = useAppSelector(state => state.app.isLoading)\r\n    const classNames = `${s.default} ${active ? s.active : ''} ${grouped ? s.grouped : ''} ${className ? className : ''}`\r\n\r\n    return <button className={classNames} disabled={disabled || isLoading}{...rest}/>\r\n})","import React, {FC} from 'react'\r\n\r\nexport const EyeIcon: FC = () => {\r\n    return (\r\n        <svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'\r\n             stroke='currentColor' strokeWidth='2' strokeLinecap='round' strokeLinejoin='round'\r\n             className='feather feather-eye'>\r\n            <path d='M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z'/>\r\n            <circle cx='12' cy='12' r='3'/>\r\n        </svg>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, KeyboardEvent, memo, useState} from 'react'\r\nimport s from './Input.module.css'\r\nimport {EyeIcon} from '../../Icons/Eye'\r\nimport {useAppSelector} from '../../../hooks/hooks'\r\n\r\nexport type DefaultInputProps = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputProps = DefaultInputProps & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    password?: boolean\r\n}\r\n\r\nexport const Input: FC<InputProps> = memo(props => {\r\n    const {\r\n        type,\r\n        onChange,\r\n        onChangeText,\r\n        onKeyPress,\r\n        onEnter,\r\n        error,\r\n        className,\r\n        spanClassName,\r\n        password,\r\n        disabled,\r\n        ...restProps\r\n    } = props\r\n\r\n    const isLoading = useAppSelector(state => state.app.isLoading)\r\n    const [isPassword, setIsPassword] = useState(!password)\r\n\r\n    const passwordToggle = () => setIsPassword(!isPassword)\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e)\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.errorMessage} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.inputError : ''} ${s.default} ${className ? className : ''}`\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <input type={password && isPassword ? 'text' : type}\r\n                   onChange={onChangeCallback}\r\n                   onKeyPress={onKeyPressCallback}\r\n                   className={finalInputClassName}\r\n                   placeholder={'Type text here...'}\r\n                   disabled={disabled || isLoading}\r\n                   {...restProps}/>\r\n            {password && <div className={s.eye} onClick={passwordToggle}><EyeIcon/></div>}\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react'\r\nimport {Button} from '../Button/Button'\r\nimport {Input} from '../Input/Input'\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype AddItemFormProps = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: FC<AddItemFormProps> = memo(({addItem}) => {\r\n    const [value, setValue] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n        error && setError(false)\r\n    }, [error])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        if (value.trim()) {\r\n            addItem(value.trim())\r\n            setValue('')\r\n        } else {\r\n            setValue('')\r\n            setError(true)\r\n        }\r\n    }, [addItem, value])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }, [onClickHandler])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <Input value={value}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error ? 'Field is required' : ''}/>\r\n            <Button onClick={onClickHandler}>Add</Button>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react'\r\nimport {Input} from '../Input/Input'\r\n\r\ntype EditableSpanProps = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan: FC<EditableSpanProps> = memo(({title, changeTitle}) => {\r\n    const [value, setValue] = useState<string>(title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = useCallback(() => setEditMode(true), [])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        changeTitle(value)\r\n    }, [changeTitle, value])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value), [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }, [offEditMode])\r\n\r\n    return (\r\n        editMode\r\n            ? <Input value={value}\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import React, {FC, memo} from 'react'\r\nimport s from './Button.module.css'\r\nimport {DefaultButtonProps} from './Button'\r\nimport {useAppSelector} from '../../../hooks/hooks'\r\n\r\ntype IconButtonProps = DefaultButtonProps & {}\r\n\r\nexport const IconButton: FC<IconButtonProps> = memo(({className, disabled, ...restProps}) => {\r\n    const isLoading = useAppSelector(state => state.app.isLoading)\r\n    const classNames = `${s.icon} ${className ? className : ''}`\r\n\r\n    return <button className={classNames} disabled={disabled || isLoading} {...restProps}/>\r\n})\r\n","import React, {FC} from 'react'\r\n\r\nexport const Delete: FC = () => {\r\n    return (\r\n        <svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'\r\n             stroke='currentColor' strokeWidth='2' strokeLinecap='round' strokeLinejoin='round'\r\n             className='feather feather-x'>\r\n            <line x1='18' y1='6' x2='6' y2='18'/>\r\n            <line x1='6' y1='6' x2='18' y2='18'/>\r\n        </svg>\r\n    )\r\n}","import React, {ChangeEvent, FC, memo} from 'react'\r\nimport s from './Checkbox.module.css'\r\nimport {DefaultInputProps} from '../Input/Input'\r\nimport {useAppSelector} from '../../../hooks/hooks'\r\n\r\ntype CheckboxProps = DefaultInputProps & {\r\n    onChangeCallback?: (status: boolean) => void\r\n}\r\n\r\nexport const Checkbox: FC<CheckboxProps> = memo(props => {\r\n    const {onChangeCallback, onChange, className, children, disabled, ...restProps} = props\r\n    const isLoading = useAppSelector(state => state.app.isLoading)\r\n\r\n    const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeCallback && onChangeCallback(e.currentTarget.checked)\r\n    }\r\n\r\n    const classNames = `${s.checkbox}${className ? className : ''}`\r\n\r\n    return (\r\n        <label className={s.label}>\r\n            <input type={'checkbox'}\r\n                   onChange={onCheckboxChangeHandler}\r\n                   disabled={disabled || isLoading}\r\n                   className={classNames}\r\n                   {...restProps}/>\r\n            {children && <span>{children}</span>}\r\n        </label>\r\n    )\r\n})","import React, {FC, memo, useCallback} from 'react'\r\nimport s from './Todolists.module.css'\r\nimport {useAppDispatch} from '../../hooks/hooks'\r\nimport {TaskResponse} from '../../api/tasks-api'\r\nimport {deleteTask, updateTaskStatus, updateTaskTitle} from '../../store/reducers/tasks-reducer/tasks-reducer'\r\nimport {TaskStatuses} from '../../types/server-response-types'\r\nimport {Checkbox} from '../../components/UI/Checkbox/Checkbox'\r\nimport {EditableSpan} from '../../components/UI/EditableSpan/EditableSpan'\r\nimport {IconButton} from '../../components/UI/Button/IconButton'\r\nimport {Delete} from '../../components/Icons/Delete'\r\n\r\ntype TaskProps = {\r\n    todolistID: string\r\n    task: TaskResponse\r\n}\r\n\r\nexport const Task: FC<TaskProps> = memo(({todolistID, task}) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const changeTaskStatusHandler = useCallback((status: boolean) =>\r\n        dispatch(updateTaskStatus({\r\n            todolistID,\r\n            taskID: task.id,\r\n            status: status ? TaskStatuses.Completed : TaskStatuses.inProgress\r\n        })), [dispatch, todolistID, task.id])\r\n\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        dispatch(updateTaskTitle({todolistID, taskID: task.id, title}))\r\n    }, [dispatch, todolistID, task.id])\r\n\r\n    const removeTaskHandler = useCallback(() => {\r\n        dispatch(deleteTask({taskID: task.id, todolistID}))\r\n    }, [dispatch, todolistID, task.id])\r\n\r\n    return (\r\n        <div className={s.taskContentContainer}>\r\n            <div className={s.taskContent}>\r\n                <Checkbox checked={task.status === TaskStatuses.Completed} onChangeCallback={changeTaskStatusHandler}/>\r\n                <EditableSpan title={task.title} changeTitle={changeTaskTitleHandler}/>\r\n            </div>\r\n\r\n            <IconButton onClick={removeTaskHandler}><Delete/></IconButton>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useCallback, useEffect} from 'react'\r\nimport s from './Todolists.module.css'\r\nimport {useAppDispatch} from '../../hooks/hooks'\r\nimport {TaskResponse} from '../../api/tasks-api'\r\nimport {\r\n    changeTodolistFilter,\r\n    deleteTodolist,\r\n    FilterValues, TodolistType,\r\n    updateTodolistTitle\r\n} from '../../store/reducers/todolists-reducer/todolists-reducer'\r\nimport {createTask, fetchTasks} from '../../store/reducers/tasks-reducer/tasks-reducer'\r\nimport {TaskStatuses} from '../../types/server-response-types'\r\nimport {EditableSpan} from '../../components/UI/EditableSpan/EditableSpan'\r\nimport {IconButton} from '../../components/UI/Button/IconButton'\r\nimport {Delete} from '../../components/Icons/Delete'\r\nimport {AddItemForm} from '../../components/UI/AddItemForm/AddItemForm'\r\nimport {Task} from './Task'\r\nimport {Button} from '../../components/UI/Button/Button'\r\n\r\ntype TodolistProps = {\r\n    todolist: TodolistType\r\n    tasks: TaskResponse[]\r\n}\r\n\r\nexport const Todolist: FC<TodolistProps> = memo(({todolist, tasks}) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const addTaskHandler = useCallback((title: string) =>\r\n        dispatch(createTask({title, todolistID: todolist.id})), [dispatch, todolist.id])\r\n\r\n    const changeTodolistTitleHandler = useCallback((title: string) =>\r\n        dispatch(updateTodolistTitle({title, todolistID: todolist.id})), [dispatch, todolist.id])\r\n\r\n    const removeTodolistHandler = useCallback(() =>\r\n        dispatch(deleteTodolist({todolistID: todolist.id})), [dispatch, todolist.id])\r\n\r\n    const changeFilterHandler = useCallback((filter: FilterValues) =>\r\n        dispatch(changeTodolistFilter({filter, todolistID: todolist.id})), [dispatch, todolist.id])\r\n\r\n    const tasksToRender = useCallback((filter: FilterValues) => {\r\n        switch (filter) {\r\n            case 'Completed':\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            case 'Active':\r\n                return tasks.filter(t => t.status !== TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }, [tasks])\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks({todolistID: todolist.id}))\r\n    }, [dispatch, todolist.id])\r\n\r\n    return (\r\n        <div className={s.todolistContainer}>\r\n            <div className={s.titleContainer}>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodolistTitleHandler}/>\r\n                <IconButton onClick={removeTodolistHandler}><Delete/></IconButton>\r\n            </div>\r\n\r\n            <div className={s.addTaskContainer}>\r\n                <AddItemForm addItem={addTaskHandler}/>\r\n            </div>\r\n\r\n            <div>\r\n                {tasksToRender(todolist.filter).map(t => <Task key={t.id} task={t} todolistID={todolist.id}/>)}\r\n            </div>\r\n\r\n            <div className={s.buttonsContainer}>\r\n                <Button onClick={() => changeFilterHandler('All')} active={todolist.filter === 'All'} grouped>\r\n                    All\r\n                </Button>\r\n\r\n                <Button onClick={() => changeFilterHandler('Active')} active={todolist.filter === 'Active'} grouped>\r\n                    Active\r\n                </Button>\r\n\r\n                <Button onClick={() => changeFilterHandler('Completed')} active={todolist.filter === 'Completed'}\r\n                        grouped>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useCallback, useEffect} from 'react'\r\nimport s from './Todolists.module.css'\r\nimport {useAppDispatch, useAppSelector} from '../../hooks/hooks'\r\nimport {AddItemForm} from '../../components/UI/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PATH} from '../../routes/routes'\r\nimport {createTodolist, fetchTodolists,} from '../../store/reducers/todolists-reducer/todolists-reducer'\r\n\r\nexport const Todolists: FC = memo(() => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const tasks = useAppSelector(state => state.tasks)\r\n    const todolists = useAppSelector(state => state.todolists)\r\n\r\n    const addTodolistHandler = useCallback((title: string) =>\r\n        dispatch(createTodolist({title})), [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) return\r\n        dispatch(fetchTodolists())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div>\r\n            <h1>Todolist</h1>\r\n\r\n            <div className={s.addTodolistContainer}>\r\n                <AddItemForm addItem={addTodolistHandler}/>\r\n            </div>\r\n\r\n            <div className={s.todolistsWrapper}>\r\n                {todolists.map(tdl => <Todolist key={tdl.id} todolist={tdl} tasks={tasks[tdl.id]}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {FC} from 'react'\r\n\r\nexport const Home: FC = () => {\r\n    return (\r\n        <div>\r\n            <h1>Home page</h1>\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {Input} from '../../components/UI/Input/Input'\r\nimport {Button} from '../../components/UI/Button/Button'\r\nimport {useFormik} from 'formik'\r\nimport {Checkbox} from '../../components/UI/Checkbox/Checkbox'\r\nimport {useAppDispatch, useAppSelector} from '../../hooks/hooks'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PATH} from '../../routes/routes'\r\nimport {login} from '../../store/reducers/auth-reducer/auth-reducer'\r\n\r\ntype FormInitValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login: FC = () => {\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const validate = (values: FormInitValues) => {\r\n        const errors = {} as FormInitValues\r\n        if (!values.email) errors.email = 'Email is required'\r\n        if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = 'Invalid email address'\r\n        if (!values.password || values.password.length < 3 || values.password.length > 20) errors.password = 'Must be 3-20 characters'\r\n        return errors\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: (values, formikHelpers) => dispatch(login({loginData: values}))\r\n    })\r\n\r\n    if (isLoggedIn) return <Redirect to={PATH.TODOLIST}/>\r\n\r\n    return (\r\n        <div style={{marginTop: 40}}>\r\n            <form onSubmit={formik.handleSubmit}\r\n                  style={{display: 'flex', flexDirection: 'column', gap: 24}}>\r\n\r\n                <Input type={'text'}\r\n                       placeholder={'Email'}\r\n                       {...formik.getFieldProps('email')}/>\r\n                {formik.errors.email && formik.touched.email &&\r\n\t\t\t\t<div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                <Input type={'password'} password\r\n                       placeholder={'Password'}\r\n                       {...formik.getFieldProps('password')}/>\r\n                {formik.errors.password && formik.touched.password &&\r\n\t\t\t\t<div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                <Checkbox id={'rememberMe'}\r\n                          checked={formik.values.rememberMe}\r\n                          {...formik.getFieldProps('rememberMe')}>\r\n                    Remember Me\r\n                </Checkbox>\r\n\r\n                <Button type={'submit'}>Login</Button>\r\n            </form>\r\n\r\n            <div style={{margin: '40px 0'}}>\r\n                <p>To login, you can register <a href={'https://social-network.samuraijs.com/'}\r\n                                                 rel={'noreferrer'}\r\n                                                 target={'_blank'}>here</a></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Button} from '../../components/UI/Button/Button'\r\nimport s from './Error.module.css'\r\n\r\nexport const Error: FC = () => {\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h1>Page not found!</h1>\r\n            <img src='https://cdn.statically.io/img/i.pinimg.com/originals/ef/0b/58/ef0b58bc4be3f9622c10a73fe685c57d.jpg'\r\n                 alt='error'/>\r\n            <Button onClick={() => history.goBack()}>Go back</Button>\r\n        </div>\r\n    )\r\n}","import React, {FC, memo} from 'react'\r\nimport s from './Progress.module.css'\r\n\r\nexport const Progress: FC = memo(() => {\r\n    return (\r\n        <div className={s.progressContainer}>\r\n            <div className={s.progressBar}/>\r\n        </div>\r\n    )\r\n})","import React, {FC, useEffect} from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {PATH, routes} from '../routes/routes'\r\nimport {useAppDispatch, useAppSelector} from '../hooks/hooks'\r\nimport {checkAuth} from '../store/reducers/auth-reducer/auth-reducer'\r\nimport {Progress} from '../components/UI/Progress/Progress'\r\n\r\nexport const AppRouter: FC = () => {\r\n    const {isInitialized, isLoading} = useAppSelector(state => state.app)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(checkAuth())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) return <Progress/>\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <Progress/>}\r\n            <Switch>\r\n                {routes.map(r => <Route key={r.path} path={r.path} component={r.component} exact={r.exact}/>)}\r\n\r\n                <Redirect from={PATH.EMPTY} to={PATH.ERROR}/>\r\n            </Switch>\r\n        </>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {PATH} from '../../routes/routes'\r\nimport {useAppDispatch, useAppSelector} from '../../hooks/hooks'\r\nimport {logout} from '../../store/reducers/auth-reducer/auth-reducer'\r\nimport s from './Navigation.module.css'\r\n\r\nexport const Navigation: FC = () => {\r\n    const {isLoggedIn} = useAppSelector(state => state.auth)\r\n    const dispatch = useAppDispatch()\r\n    const logoutHandler = () => dispatch(logout())\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <nav className={s.container}>\r\n                <NavLink activeClassName={s.active} to={PATH.HOME} exact>Home</NavLink>\r\n                <NavLink activeClassName={s.active} to={PATH.TODOLIST}>Todolist</NavLink>\r\n\r\n                {!isLoggedIn\r\n                    ? <NavLink activeClassName={s.active} to={PATH.LOGIN}>Login</NavLink>\r\n                    : <span onClick={logoutHandler}>Logout</span>}\r\n            </nav>\r\n        </div>\r\n    )\r\n}","import React, {FC, memo, useCallback, useEffect, useState} from 'react'\r\nimport s from './Alerts.module.css'\r\n\r\ntype SnackbarProps = {\r\n    type: 'error' | 'success'\r\n    text: string\r\n    open: boolean\r\n    onClose: () => void\r\n}\r\n\r\nexport const Alert: FC<SnackbarProps> = memo(({type, text, open, onClose}) => {\r\n    const [isOpen, setIsOpen] = useState(open)\r\n\r\n    const closeSnackbar = useCallback(() => {\r\n        setIsOpen(false)\r\n        onClose()\r\n    }, [onClose])\r\n\r\n    useEffect(() => {\r\n        setIsOpen(open)\r\n        const timeoutID = setTimeout(() => {\r\n            closeSnackbar()\r\n        }, 3500)\r\n\r\n        return () => clearTimeout(timeoutID)\r\n    }, [closeSnackbar, open])\r\n\r\n\r\n    return (\r\n        <>\r\n            {isOpen &&\r\n\t\t\t<div className={`${s.container} ${type === 'error' && s.error}`}>\r\n\t\t\t\t<div>{text ? text : 'I am Alert'}</div>\r\n\t\t\t\t<span onClick={closeSnackbar}>X</span>\r\n\t\t\t</div>}\r\n        </>\r\n    )\r\n})","import React, {FC, memo, useCallback} from 'react'\r\nimport {Alert} from './Alert'\r\nimport {useAppDispatch, useAppSelector} from '../../../hooks/hooks'\r\nimport {setAppError} from '../../../store/reducers/app-reducer/app-reducer'\r\n\r\nexport const AlertError: FC = memo(() => {\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onCloseHandler = useCallback(() => {\r\n        dispatch(setAppError({error: ''}))\r\n    }, [dispatch])\r\n\r\n    return <Alert type={'error'} text={error} open={!!error} onClose={onCloseHandler}/>\r\n})","import React, {FC, memo} from 'react'\r\nimport s from './Alerts.module.css'\r\nimport {AlertError} from './AlertError'\r\n\r\nexport const Alerts: FC = memo(() => {\r\n    return (\r\n        <div className={s.alertsWrapper}>\r\n            <AlertError/>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from '../store/store'\r\nimport {AppRouter} from './AppRouter'\r\nimport {Navigation} from '../components/Navigation/Navigation'\r\nimport {Alerts} from '../components/UI/Alerts/Alerts'\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <Alerts/>\r\n                <Navigation/>\r\n                <AppRouter/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './app/App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'))"],"sourceRoot":""}