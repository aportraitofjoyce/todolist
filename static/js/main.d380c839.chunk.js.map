{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickHandler","trim","addItem","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","Add","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Todolist","changeTodolistFilterHandler","filter","changeTodolistFilter","TODOLIST_ID","Grid","item","spacing","Paper","style","padding","changeTodolistTitle","aria-label","removeTodolist","Delete","addTask","margin","tasksToRender","map","t","Checkbox","checked","isDone","changeTaskStatus","changeTaskTitle","removeTask","Button","color","TODOLIST_ID_1","v1","TODOLIST_ID_2","App","todolists","setTodolists","tasks","setTasks","useEffect","todolistsString","localStorage","getItem","todolistsInit","JSON","parse","tasksString","tasksInit","setItem","stringify","taskID","newTask","tdl","todolist","AppBar","position","Toolbar","size","edge","sx","mr","Menu","Typography","component","flexGrow","Container","container","NEW_TODOLIST_ID","newTodolist","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d380c839.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype InputPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: InputPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickHandler = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setTitle('')\r\n            setError(true)\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField id=\"standard-basic\" label=\"What to add?\" variant=\"standard\"\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={error}/>\r\n\r\n            <IconButton onClick={onClickHandler}>\r\n                <Add/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                id=\"standard-basic\" label=\"Edit your task\" variant=\"standard\"\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {FilterValuesType, TaskType} from './App'\r\nimport {AddItemForm} from './components/AddItemForm'\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, Checkbox, Grid, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodolistPropsType = {\r\n    TODOLIST_ID: string\r\n    title: string\r\n    tasksToRender: TaskType[]\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, TODOLIST_ID: string) => void\r\n    addTask: (title: string, TODOLIST_ID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, TODOLIST_ID: string) => void\r\n    changeTodolistFilter: (filter: FilterValuesType, TODOLIST_ID: string) => void\r\n    removeTodolist: (TODOLIST_ID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, TODOLIST_ID: string) => void\r\n    changeTodolistTitle: (title: string, TODOLIST_ID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = (props) => {\r\n\r\n    const changeTodolistFilterHandler = (filter: FilterValuesType) => props.changeTodolistFilter(filter, props.TODOLIST_ID)\r\n    const removeTodolistHandler = () => props.removeTodolist(props.TODOLIST_ID)\r\n    const addTask = (title: string) => props.addTask(title, props.TODOLIST_ID)\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.TODOLIST_ID)\r\n\r\n    return (\r\n        <Grid item spacing={8}>\r\n            <Paper style={{padding: '16px'}}>\r\n                <h2>\r\n                    <EditableSpan title={props.title}\r\n                                  changeTitle={changeTodolistTitle}/>\r\n                    <IconButton aria-label=\"delete\"\r\n                                onClick={removeTodolistHandler}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h2>\r\n                <AddItemForm addItem={addTask}/>\r\n            </Paper>\r\n\r\n            <Paper style={{padding: '16px', margin: '16px 0'}}>\r\n                {props.tasksToRender.map(t => {\r\n                    const removeTaskHandler = () => props.removeTask(t.id, props.TODOLIST_ID)\r\n                    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.TODOLIST_ID)\r\n                    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(t.id, e.currentTarget.checked, props.TODOLIST_ID)\r\n                    }\r\n\r\n                    return (\r\n                        <div key={t.id}>\r\n                            <Checkbox checked={t.isDone}\r\n                                      onChange={changeTaskStatusHandler}/>\r\n\r\n                            <EditableSpan title={t.title}\r\n                                          changeTitle={changeTaskTitle}/>\r\n\r\n                            <IconButton aria-label=\"delete\"\r\n                                        onClick={removeTaskHandler}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Paper>\r\n\r\n            <div style={{padding: '16px'}}>\r\n                <Button variant={\"contained\"}\r\n                        onClick={() => changeTodolistFilterHandler('All')}\r\n                        color={props.filter === 'All' ? \"secondary\" : \"primary\"}>All\r\n                </Button>\r\n                <Button variant={\"contained\"}\r\n                        onClick={() => changeTodolistFilterHandler('Active')}\r\n                        style={{margin: '0 8px'}}\r\n                        color={props.filter === 'Active' ? \"secondary\" : \"primary\"}>Active\r\n                </Button>\r\n                <Button variant={\"contained\"}\r\n                        onClick={() => changeTodolistFilterHandler('Completed')}\r\n                        color={props.filter === 'Completed' ? \"secondary\" : \"primary\"}>Completed\r\n                </Button>\r\n            </div>\r\n\r\n        </Grid>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Todolist} from './Todolist'\r\nimport {v1} from 'uuid'\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst TODOLIST_ID_1 = v1()\r\nconst TODOLIST_ID_2 = v1()\r\n\r\nexport const App = () => {\r\n    const [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: TODOLIST_ID_1, title: 'What to Learn', filter: 'All'},\r\n        {id: TODOLIST_ID_2, title: 'What to Buy', filter: 'All'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [TODOLIST_ID_1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ],\r\n\r\n        [TODOLIST_ID_2]: [\r\n            {id: v1(), title: 'Beer', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Cola', isDone: false},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Smoke', isDone: true},\r\n        ],\r\n    })\r\n\r\n    useEffect(() => {\r\n        const todolistsString = localStorage.getItem('todolists')\r\n        if (todolistsString) {\r\n            const todolistsInit = JSON.parse(todolistsString)\r\n            setTodolists(todolistsInit)\r\n        }\r\n\r\n        const tasksString = localStorage.getItem('tasks')\r\n        if (tasksString) {\r\n            const tasksInit = JSON.parse(tasksString)\r\n            setTasks(tasksInit)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('todolists', JSON.stringify(todolists))\r\n        localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    }, [todolists, tasks])\r\n\r\n    const removeTask = (taskID: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, TODOLIST_ID: string) => {\r\n        const newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[TODOLIST_ID] = [newTask, ...tasks[TODOLIST_ID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, isDone} : t))\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodolistFilter = (filter: FilterValuesType, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(tdl => (tdl.id === TODOLIST_ID ? {...tdl, filter} : tdl)))\r\n    }\r\n    const removeTodolist = (TODOLIST_ID: string) => {\r\n        setTodolists(todolists.filter(tdl => tdl.id !== TODOLIST_ID))\r\n        delete tasks[TODOLIST_ID]\r\n    }\r\n    const tasksToRender = (todolist: TodolistType): TaskType[] => {\r\n        switch (todolist.filter) {\r\n            case 'Completed':\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            case 'Active':\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        const NEW_TODOLIST_ID = v1()\r\n        const newTodolist: TodolistType = {\r\n            id: NEW_TODOLIST_ID,\r\n            title: title,\r\n            filter: \"All\"\r\n        }\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({...tasks, [NEW_TODOLIST_ID]: []})\r\n    }\r\n    const changeTodolistTitle = (title: string, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(tdl => (tdl.id === TODOLIST_ID ? {...tdl, title} : tdl)))\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, title} : t))\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        Todolist\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container>\r\n                <Grid container\r\n                      style={{margin: '40px 0'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={5}>\r\n                    {todolists.map(todolist =>\r\n                        <Todolist\r\n                            key={todolist.id}\r\n                            TODOLIST_ID={todolist.id}\r\n                            title={todolist.title}\r\n                            filter={todolist.filter}\r\n                            removeTask={removeTask}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTodolistFilter={changeTodolistFilter}\r\n                            removeTodolist={removeTodolist}\r\n                            tasksToRender={tasksToRender(todolist)}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}/>\r\n                    )}\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './App'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}