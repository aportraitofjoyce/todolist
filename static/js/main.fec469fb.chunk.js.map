{"version":3,"sources":["Todolist.module.css","components/UI/Button/Button.module.css","components/UI/Input/Input.module.css","App.module.css","components/AddItemForm.module.css","components/UI/Checkbox/Checkbox.module.css","components/UI/Button/Button.tsx","components/UI/Input/Input.tsx","components/AddItemForm.tsx","components/EditableSpan.tsx","components/UI/Checkbox/Checkbox.tsx","components/UI/Button/IconButton.tsx","components/Icons/Delete/Delete.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["module","exports","Button","active","grouped","className","restProps","finalClassName","s","default","Input","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","errorMessage","finalInputClassName","inputError","input","container","e","currentTarget","value","key","placeholder","AddItemForm","props","useState","title","setTitle","setError","onClickHandler","trim","addItem","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Checkbox","checked","changeStatus","checkbox","IconButton","icon","Delete","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","Todolist","changeTodolistFilter","filter","TODOLIST_ID","todolistContainer","titleContainer","changeTodolistTitle","removeTodolist","addTaskContainer","addTask","tasksToRender","map","t","taskContentContainer","taskContent","isDone","changeTaskStatus","id","changeTaskTitle","removeTask","style","margin","opacity","fontSize","String","date","buttonsContainer","sortTasksByName","sortTasksByDate","TODOLIST_ID_1","v1","TODOLIST_ID_2","App","createTime","Date","getHours","getMinutes","todolists","setTodolists","tasks","setTasks","useEffect","todolistsString","localStorage","getItem","todolistsInit","JSON","parse","tasksString","tasksInit","setItem","stringify","taskID","newTask","newTasks","sort","a","b","localeCompare","tdl","todolist","addTodolistContainer","NEW_TODOLIST_ID","newTodolist","todolistsContainer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fec469fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistContainer\":\"Todolist_todolistContainer__29nCF\",\"buttonsContainer\":\"Todolist_buttonsContainer__qwPAV\",\"titleContainer\":\"Todolist_titleContainer___Y2lD\",\"addTaskContainer\":\"Todolist_addTaskContainer__ByY1N\",\"taskContentContainer\":\"Todolist_taskContentContainer__3tIO2\",\"taskContent\":\"Todolist_taskContent__jp9po\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__30-Gc\",\"grouped\":\"Button_grouped__1qQvh\",\"active\":\"Button_active__2ym-I\",\"icon\":\"Button_icon___Tuok\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__1azzw\",\"input\":\"Input_input__2HRDK\",\"inputError\":\"Input_inputError__1hcoG\",\"errorMessage\":\"Input_errorMessage__1nrIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTodolistContainer\":\"App_addTodolistContainer__15e24\",\"todolistsContainer\":\"App_todolistsContainer__2r-oL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddItemForm_container__3vWft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__1Umq4\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    active?: boolean\r\n    grouped?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (\r\n    {\r\n        active,\r\n        grouped,\r\n        className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${s.default} ${active ? s.active : ''} ${grouped ? s.grouped : ''} ${className ? className : ''}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './Input.module.css'\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (\r\n    {\r\n        type,\r\n        onChange,\r\n        onChangeText,\r\n        onKeyPress,\r\n        onEnter,\r\n        error,\r\n        className,\r\n        spanClassName,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.errorMessage} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.inputError : ''} ${s.input} ${className ? className : ''}`\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                placeholder={'Введите текст...'}\r\n                {...restProps}\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Button} from \"./UI/Button/Button\";\r\nimport {Input} from \"./UI/Input/Input\";\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype InputPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: InputPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickHandler = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setTitle('')\r\n            setError(true)\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <Input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error ? 'Field is required' : ''}/>\r\n            <Button onClick={onClickHandler}>Add</Button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Input} from \"./UI/Input/Input\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <Input value={title}\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport s from './Checkbox.module.css'\r\n\r\ntype CheckboxPropsType = {\r\n    checked: boolean\r\n    changeStatus: (isDone: boolean) => void\r\n}\r\n\r\nexport const Checkbox = (props: CheckboxPropsType) => {\r\n    const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(e.currentTarget.checked)\r\n    }\r\n    return <input type='checkbox' checked={props.checked} onChange={onCheckboxChangeHandler} className={s.checkbox}/>\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype IconButtonPropsType = DefaultButtonPropsType & {}\r\n\r\nexport const IconButton: React.FC<IconButtonPropsType> = (\r\n    {\r\n        className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${s.icon} ${className ? className : ''}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport const Delete = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n             stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n             className=\"feather feather-x\">\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n        </svg>\r\n    )\r\n}","import React from 'react'\r\nimport {FilterValuesType, TaskType} from './App'\r\nimport {AddItemForm} from './components/AddItemForm'\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button} from \"./components/UI/Button/Button\";\r\nimport {Checkbox} from \"./components/UI/Checkbox/Checkbox\";\r\nimport s from './Todolist.module.css'\r\nimport {IconButton} from \"./components/UI/Button/IconButton\";\r\nimport {Delete} from \"./components/Icons/Delete/Delete\";\r\n\r\ntype TodolistPropsType = {\r\n    TODOLIST_ID: string\r\n    title: string\r\n    tasksToRender: TaskType[]\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, TODOLIST_ID: string) => void\r\n    addTask: (title: string, TODOLIST_ID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, TODOLIST_ID: string) => void\r\n    changeTodolistFilter: (filter: FilterValuesType, TODOLIST_ID: string) => void\r\n    removeTodolist: (TODOLIST_ID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, TODOLIST_ID: string) => void\r\n    changeTodolistTitle: (title: string, TODOLIST_ID: string) => void\r\n    sortTasksByName: (TODOLIST_ID: string) => void\r\n    sortTasksByDate: (TODOLIST_ID: string) => void\r\n\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = (props) => {\r\n\r\n    const changeTodolistFilter = (filter: FilterValuesType) => props.changeTodolistFilter(filter, props.TODOLIST_ID)\r\n    const removeTodolist = () => props.removeTodolist(props.TODOLIST_ID)\r\n    const addTask = (title: string) => props.addTask(title, props.TODOLIST_ID)\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.TODOLIST_ID)\r\n    const sortTasksByName = () => props.sortTasksByName(props.TODOLIST_ID)\r\n    const sortTasksByDate = () => props.sortTasksByDate(props.TODOLIST_ID)\r\n\r\n    return (\r\n        <div className={s.todolistContainer}>\r\n            <div className={s.titleContainer}>\r\n                <EditableSpan title={props.title}\r\n                              changeTitle={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}><Delete/></IconButton>\r\n            </div>\r\n\r\n            <div className={s.addTaskContainer}>\r\n                <AddItemForm addItem={addTask}/>\r\n            </div>\r\n\r\n            <div>\r\n                {props.tasksToRender.map(t => {\r\n                    const removeTask = () => props.removeTask(t.id, props.TODOLIST_ID)\r\n                    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.TODOLIST_ID)\r\n                    const changeTaskStatus = (isDone: boolean) => {\r\n                        props.changeTaskStatus(t.id, isDone, props.TODOLIST_ID)\r\n                    }\r\n\r\n                    return (\r\n                        <div key={t.id}>\r\n                            <div className={s.taskContentContainer}>\r\n                                <div className={s.taskContent}>\r\n                                    <Checkbox checked={t.isDone}\r\n                                              changeStatus={changeTaskStatus}/>\r\n\r\n                                    <EditableSpan title={t.title}\r\n                                                  changeTitle={changeTaskTitle}/>\r\n                                </div>\r\n                                <IconButton onClick={removeTask}><Delete/></IconButton>\r\n                            </div>\r\n                            <div style={{\r\n                                margin: '8px 0 16px 40px',\r\n                                opacity: '0.8',\r\n                                fontSize: '14px'\r\n                            }}>{String(t.date)}</div>\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n            <div className={s.buttonsContainer}>\r\n                <Button onClick={() => changeTodolistFilter('All')}\r\n                        active={props.filter === 'All'}\r\n                        grouped>\r\n                    All\r\n                </Button>\r\n                <Button onClick={() => changeTodolistFilter('Active')}\r\n                        active={props.filter === 'Active'}\r\n                        grouped>\r\n                    Active\r\n                </Button>\r\n                <Button onClick={() => changeTodolistFilter('Completed')}\r\n                        active={props.filter === 'Completed'}\r\n                        grouped>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n            <div className={s.buttonsContainer}>\r\n                <Button onClick={sortTasksByName}\r\n                        grouped>\r\n                    Sort by name\r\n                </Button>\r\n                <Button onClick={sortTasksByDate}\r\n                        grouped>\r\n                    Sort by date\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Todolist} from './Todolist'\r\nimport {v1} from 'uuid'\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport './App.css'\r\nimport s from './App.module.css'\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n    date: any\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst TODOLIST_ID_1 = v1()\r\nconst TODOLIST_ID_2 = v1()\r\n\r\nexport const App = () => {\r\n    const createTime = `${new Date().getHours()}:${new Date().getMinutes()}`\r\n\r\n    const [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: TODOLIST_ID_1, title: 'What to learn', filter: 'All'},\r\n        {id: TODOLIST_ID_2, title: 'What to buy', filter: 'All'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [TODOLIST_ID_1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true, date: createTime},\r\n            {id: v1(), title: 'JS', isDone: true, date: createTime},\r\n            {id: v1(), title: 'ReactJS', isDone: false, date: createTime},\r\n            {id: v1(), title: 'Rest API', isDone: false, date: createTime},\r\n            {id: v1(), title: 'GraphQL', isDone: false, date: createTime},\r\n        ],\r\n\r\n        [TODOLIST_ID_2]: [\r\n            {id: v1(), title: 'Beer', isDone: true, date: createTime},\r\n            {id: v1(), title: 'Milk', isDone: true, date: createTime},\r\n            {id: v1(), title: 'Cola', isDone: false, date: createTime},\r\n            {id: v1(), title: 'Bread', isDone: false, date: createTime},\r\n            {id: v1(), title: 'Smoke', isDone: true, date: createTime},\r\n        ],\r\n    })\r\n\r\n    useEffect(() => {\r\n        const todolistsString = localStorage.getItem('todolists')\r\n        if (todolistsString) {\r\n            const todolistsInit = JSON.parse(todolistsString)\r\n            setTodolists(todolistsInit)\r\n        }\r\n\r\n        const tasksString = localStorage.getItem('tasks')\r\n        if (tasksString) {\r\n            const tasksInit = JSON.parse(tasksString)\r\n            setTasks(tasksInit)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('todolists', JSON.stringify(todolists))\r\n        localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    }, [todolists, tasks])\r\n\r\n    const removeTask = (taskID: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, TODOLIST_ID: string) => {\r\n        const newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false,\r\n            date: `${new Date().getHours()}:${new Date().getMinutes()}`\r\n        }\r\n        tasks[TODOLIST_ID] = [newTask, ...tasks[TODOLIST_ID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, isDone} : t))\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, title} : t))\r\n        setTasks({...tasks})\r\n    }\r\n    const sortTasksByName = (TODOLIST_ID: string) => {\r\n        const newTasks =\r\n            tasks[TODOLIST_ID]\r\n                .sort((a: TaskType, b: TaskType) => a['title']\r\n                    .localeCompare(b['title']))\r\n        setTasks({...tasks, newTasks})\r\n    }\r\n    const sortTasksByDate = (TODOLIST_ID: string) => {\r\n        const newTasks =\r\n            tasks[TODOLIST_ID]\r\n                .sort((a: TaskType, b: TaskType) => a['date']\r\n                    .localeCompare(b['date']))\r\n        setTasks({...tasks, newTasks})\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        const NEW_TODOLIST_ID = v1()\r\n        const newTodolist: TodolistType = {\r\n            id: NEW_TODOLIST_ID,\r\n            title: title,\r\n            filter: \"All\"\r\n        }\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({...tasks, [NEW_TODOLIST_ID]: []})\r\n    }\r\n    const removeTodolist = (TODOLIST_ID: string) => {\r\n        setTodolists(todolists.filter(tdl => tdl.id !== TODOLIST_ID))\r\n        delete tasks[TODOLIST_ID]\r\n    }\r\n    const changeTodolistFilter = (filter: FilterValuesType, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(tdl => (tdl.id === TODOLIST_ID ? {...tdl, filter} : tdl)))\r\n    }\r\n    const changeTodolistTitle = (title: string, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(tdl => (tdl.id === TODOLIST_ID ? {...tdl, title} : tdl)))\r\n    }\r\n\r\n    const tasksToRender = (todolist: TodolistType): TaskType[] => {\r\n        switch (todolist.filter) {\r\n            case 'Completed':\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            case 'Active':\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <div className={s.addTodolistContainer}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </div>\r\n\r\n            <div className={s.todolistsContainer}>\r\n                {todolists.map(todolist =>\r\n                    <Todolist\r\n                        key={todolist.id}\r\n                        TODOLIST_ID={todolist.id}\r\n                        title={todolist.title}\r\n                        filter={todolist.filter}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodolistFilter={changeTodolistFilter}\r\n                        removeTodolist={removeTodolist}\r\n                        tasksToRender={tasksToRender(todolist)}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        sortTasksByName={sortTasksByName}\r\n                        sortTasksByDate={sortTasksByDate}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './App'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}