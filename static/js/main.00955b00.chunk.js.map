{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickHandler","trim","addItem","Grid","container","justifyContent","alignItems","m","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","Add","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Todolist","changeTodolistFilter","filter","TODOLIST_ID","sortTasksByName","item","xs","Paper","sx","padding","Typography","fontWeight","changeTodolistTitle","aria-label","removeTodolist","Delete","addTask","tasksToRender","map","t","Checkbox","checked","isDone","changeTaskStatus","changeTaskTitle","removeTask","ButtonGroup","mt","fullWidth","Button","color","style","marginBottom","sortTasksByComplete","TODOLIST_ID_1","v1","TODOLIST_ID_2","App","todolists","setTodolists","tasks","setTasks","useEffect","todolistsString","localStorage","getItem","todolistsInit","JSON","parse","tasksString","tasksInit","setItem","stringify","taskID","newTask","newTasks","sort","a","b","localeCompare","String","tdl","todolist","CssBaseline","AppBar","position","Toolbar","size","edge","mr","Menu","component","flexGrow","Container","maxWidth","NEW_TODOLIST_ID","newTodolist","spacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00955b00.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Grid, IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype InputPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: InputPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickHandler = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setTitle('')\r\n            setError(true)\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'space-between'} alignItems={'center'} m={'24px 0'}>\r\n            <TextField id=\"standard-basic\" label=\"What to add?\" variant=\"standard\"\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={error}/>\r\n\r\n            <IconButton onClick={onClickHandler}>\r\n                <Add/>\r\n            </IconButton>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                id=\"standard-basic\" variant=\"standard\"\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {FilterValuesType, TaskType} from './App'\r\nimport {AddItemForm} from './components/AddItemForm'\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, Grid, IconButton, Paper, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodolistPropsType = {\r\n    TODOLIST_ID: string\r\n    title: string\r\n    tasksToRender: TaskType[]\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, TODOLIST_ID: string) => void\r\n    addTask: (title: string, TODOLIST_ID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, TODOLIST_ID: string) => void\r\n    changeTodolistFilter: (filter: FilterValuesType, TODOLIST_ID: string) => void\r\n    removeTodolist: (TODOLIST_ID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, TODOLIST_ID: string) => void\r\n    changeTodolistTitle: (title: string, TODOLIST_ID: string) => void\r\n    sortTasksByName: (TODOLIST_ID: string) => void\r\n    sortTasksByComplete: (TODOLIST_ID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = (props) => {\r\n\r\n    const changeTodolistFilter = (filter: FilterValuesType) => props.changeTodolistFilter(filter, props.TODOLIST_ID)\r\n    const removeTodolist = () => props.removeTodolist(props.TODOLIST_ID)\r\n    const addTask = (title: string) => props.addTask(title, props.TODOLIST_ID)\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.TODOLIST_ID)\r\n    const sortTasksByName = () => props.sortTasksByName(props.TODOLIST_ID)\r\n    const sortTasksByComplete = () => props.sortTasksByComplete(props.TODOLIST_ID)\r\n\r\n    return (\r\n        <Grid item xs>\r\n            <Paper sx={{padding: '24px'}}>\r\n                <Grid container justifyContent={'space-between'} alignItems={'center'}>\r\n                    <Typography variant=\"h5\" sx={{fontWeight: 'bold'}}>\r\n                        <EditableSpan title={props.title}\r\n                                      changeTitle={changeTodolistTitle}/>\r\n                    </Typography>\r\n\r\n                    <IconButton aria-label=\"delete\"\r\n                                onClick={removeTodolist}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </Grid>\r\n\r\n                <AddItemForm addItem={addTask}/>\r\n\r\n                {props.tasksToRender.map(t => {\r\n                    const removeTask = () => props.removeTask(t.id, props.TODOLIST_ID)\r\n                    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.TODOLIST_ID)\r\n                    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(t.id, e.currentTarget.checked, props.TODOLIST_ID)\r\n                    }\r\n\r\n                    return (\r\n                        <Grid container justifyContent={'space-between'} alignItems={'center'} key={t.id}>\r\n                            <div>\r\n                                <Checkbox checked={t.isDone}\r\n                                          onChange={changeTaskStatus}/>\r\n\r\n                                <EditableSpan title={t.title}\r\n                                              changeTitle={changeTaskTitle}/>\r\n                            </div>\r\n\r\n                            <IconButton aria-label=\"delete\"\r\n                                        onClick={removeTask}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Paper>\r\n\r\n            <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\" sx={{mt: '24px'}} fullWidth>\r\n                <Button onClick={() => changeTodolistFilter('All')}\r\n                        color={props.filter === 'All' ? \"secondary\" : \"primary\"}>All\r\n                </Button>\r\n                <Button onClick={() => changeTodolistFilter('Active')}\r\n                        color={props.filter === 'Active' ? \"secondary\" : \"primary\"}>Active\r\n                </Button>\r\n                <Button onClick={() => changeTodolistFilter('Completed')}\r\n                        color={props.filter === 'Completed' ? \"secondary\" : \"primary\"}>Completed\r\n                </Button>\r\n                <Button onClick={sortTasksByName}>Sort\r\n                </Button>\r\n            </ButtonGroup>\r\n            <h4 style={{marginBottom: '8px'}}>Sort:</h4>\r\n            <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\" fullWidth>\r\n                <Button onClick={sortTasksByName}>By name</Button>\r\n                <Button onClick={sortTasksByComplete}>By complete</Button>\r\n            </ButtonGroup>\r\n        </Grid>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Todolist} from './Todolist'\r\nimport {v1} from 'uuid'\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, CssBaseline, Grid, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst TODOLIST_ID_1 = v1()\r\nconst TODOLIST_ID_2 = v1()\r\n\r\nexport const App = () => {\r\n    const [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: TODOLIST_ID_1, title: 'What to learn', filter: 'All'},\r\n        {id: TODOLIST_ID_2, title: 'What to buy', filter: 'All'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [TODOLIST_ID_1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ],\r\n\r\n        [TODOLIST_ID_2]: [\r\n            {id: v1(), title: 'Beer', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Cola', isDone: false},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Smoke', isDone: true},\r\n        ],\r\n    })\r\n\r\n    useEffect(() => {\r\n        const todolistsString = localStorage.getItem('todolists')\r\n        if (todolistsString) {\r\n            const todolistsInit = JSON.parse(todolistsString)\r\n            setTodolists(todolistsInit)\r\n        }\r\n\r\n        const tasksString = localStorage.getItem('tasks')\r\n        if (tasksString) {\r\n            const tasksInit = JSON.parse(tasksString)\r\n            setTasks(tasksInit)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('todolists', JSON.stringify(todolists))\r\n        localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    }, [todolists, tasks])\r\n\r\n    const removeTask = (taskID: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, TODOLIST_ID: string) => {\r\n        const newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[TODOLIST_ID] = [newTask, ...tasks[TODOLIST_ID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, isDone} : t))\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, title} : t))\r\n        setTasks({...tasks})\r\n    }\r\n    const sortTasksByName = (TODOLIST_ID: string) => {\r\n        const newTasks =\r\n            tasks[TODOLIST_ID]\r\n                .sort((a: TaskType, b: TaskType) => a['title']\r\n                    .localeCompare(b['title']))\r\n        setTasks({...tasks, newTasks})\r\n    }\r\n    const sortTasksByComplete = (TODOLIST_ID: string) => {\r\n        const newTasks =\r\n            tasks[TODOLIST_ID]\r\n                .sort((a: TaskType, b: TaskType) => String(a['isDone'])\r\n                    .localeCompare(String(b['isDone'])))\r\n        setTasks({...tasks, newTasks})\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        const NEW_TODOLIST_ID = v1()\r\n        const newTodolist: TodolistType = {\r\n            id: NEW_TODOLIST_ID,\r\n            title: title,\r\n            filter: \"All\"\r\n        }\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({...tasks, [NEW_TODOLIST_ID]: []})\r\n    }\r\n    const removeTodolist = (TODOLIST_ID: string) => {\r\n        setTodolists(todolists.filter(tdl => tdl.id !== TODOLIST_ID))\r\n        delete tasks[TODOLIST_ID]\r\n    }\r\n    const changeTodolistFilter = (filter: FilterValuesType, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(tdl => (tdl.id === TODOLIST_ID ? {...tdl, filter} : tdl)))\r\n    }\r\n    const changeTodolistTitle = (title: string, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(tdl => (tdl.id === TODOLIST_ID ? {...tdl, title} : tdl)))\r\n    }\r\n\r\n    const tasksToRender = (todolist: TodolistType): TaskType[] => {\r\n        switch (todolist.filter) {\r\n            case 'Completed':\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            case 'Active':\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline/>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        Todolist\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container maxWidth={\"md\"}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n\r\n                <Grid container spacing={5}>\r\n                    {todolists.map(todolist =>\r\n                        <Todolist\r\n                            sortTasksByName={sortTasksByName}\r\n                            sortTasksByComplete={sortTasksByComplete}\r\n                            key={todolist.id}\r\n                            TODOLIST_ID={todolist.id}\r\n                            title={todolist.title}\r\n                            filter={todolist.filter}\r\n                            removeTask={removeTask}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTodolistFilter={changeTodolistFilter}\r\n                            removeTodolist={removeTodolist}\r\n                            tasksToRender={tasksToRender(todolist)}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}/>\r\n                    )}\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './App'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}