{"version":3,"sources":["components/TrashIcon.tsx","components/Button.tsx","components/AddItemForm.tsx","components/Checkbox.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["TrashIcon","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","points","d","x1","y1","x2","y2","Button","props","finalButtonClassName","filter","value","onClick","icon","AddItemForm","useState","title","setTitle","error","setError","onClickHandler","trim","addItem","onChange","e","currentTarget","onKeyPress","key","placeholder","Checkbox","type","checked","changeStatus","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Todolist","changeTodolistFilterHandler","changeTodolistFilter","TODOLIST_ID","changeTodolistTitle","removeTodolist","addTask","tasksToRender","map","t","isDone","changeTaskStatus","id","changeTaskTitle","removeTask","TODOLIST_ID_1","v1","TODOLIST_ID_2","App","todolists","setTodolists","tasks","setTasks","useEffect","todolistsString","localStorage","getItem","todolistsInit","JSON","parse","tasksString","tasksInit","setItem","stringify","taskID","newTask","todolist","NEW_TODOLIST_ID","newTodolist","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.424dc1ef.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const TrashIcon = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n             stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n             className=\"feather feather-trash-2\">\r\n            <polyline points=\"3 6 5 6 21 6\"/>\r\n            <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"/>\r\n            <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"/>\r\n            <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"/>\r\n        </svg>\r\n    )\r\n}","import React from 'react'\r\nimport {FilterValuesType} from '../App'\r\nimport {TrashIcon} from \"./TrashIcon\";\r\n\r\ntype ButtonPropsType = {\r\n    value: string\r\n    onClick: () => void\r\n    className?: string | undefined\r\n    filter?: FilterValuesType\r\n    icon?: string\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    const finalButtonClassName = `${props.filter === props.value ? 'activeButton' : ''} ${props.className}`\r\n\r\n    return (\r\n        <button onClick={props.onClick}\r\n                className={finalButtonClassName}>\r\n            {props.icon ? <TrashIcon/> : props.value}\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Button} from \"./Button\";\r\n\r\ntype InputPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: InputPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickHandler = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setTitle('')\r\n            setError(true)\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickHandler()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={'inputDataContainer'}>\r\n                <input value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? 'dataInput error' : 'dataInput'}\r\n                       placeholder={'What to add?'}\r\n                />\r\n                <Button value={'Add'} onClick={onClickHandler}/>\r\n            </div>\r\n            {error && <div className={'errorMessage'}>Field is required</div>}\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react'\r\n\r\ntype CheckboxPropsType = {\r\n    checked: boolean\r\n    changeStatus: (isDone: boolean) => void\r\n}\r\n\r\nexport const Checkbox = (props: CheckboxPropsType) => {\r\n    const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(e.currentTarget.checked)\r\n    }\r\n    return <input type='checkbox' checked={props.checked} onChange={onCheckboxChangeHandler} className={'checkbox'}/>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    className?: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={title}\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus/>\r\n            : <span className={props.className}\r\n                    onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React from 'react'\r\nimport {FilterValuesType, TaskType} from './App'\r\nimport {Button} from './components/Button'\r\nimport {AddItemForm} from './components/AddItemForm'\r\nimport {Checkbox} from './components/Checkbox'\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\n\r\ntype TodolistPropsType = {\r\n    TODOLIST_ID: string\r\n    title: string\r\n    tasksToRender: TaskType[]\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, TODOLIST_ID: string) => void\r\n    addTask: (title: string, TODOLIST_ID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, TODOLIST_ID: string) => void\r\n    changeTodolistFilter: (filter: FilterValuesType, TODOLIST_ID: string) => void\r\n    removeTodolist: (TODOLIST_ID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, TODOLIST_ID: string) => void\r\n    changeTodolistTitle: (title: string, TODOLIST_ID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = (props) => {\r\n\r\n    const changeTodolistFilterHandler = (filter: FilterValuesType) => props.changeTodolistFilter(filter, props.TODOLIST_ID)\r\n    const removeTodolistHandler = () => props.removeTodolist(props.TODOLIST_ID)\r\n    const addTask = (title: string) => props.addTask(title, props.TODOLIST_ID)\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.TODOLIST_ID)\r\n\r\n    return (\r\n        <div className={'todolistContainer'}>\r\n\r\n            <div className={'todolistHeaderWrapper'}>\r\n                <div className={'todolistHeaderContainer'}>\r\n                    <h2>\r\n                        <EditableSpan title={props.title}\r\n                                      changeTitle={changeTodolistTitle}/>\r\n                    </h2>\r\n                    <Button value={'x'}\r\n                            className={'deleteButton'}\r\n                            onClick={removeTodolistHandler}\r\n                            icon={'TrashIcon'}/>\r\n                </div>\r\n                <AddItemForm addItem={addTask}/>\r\n            </div>\r\n\r\n            <ul className={'tasksContainer'}>\r\n                {props.tasksToRender.map(t => {\r\n                    const removeTaskHandler = () => props.removeTask(t.id, props.TODOLIST_ID)\r\n                    const changeTaskStatusHandler = (isDone: boolean) => props.changeTaskStatus(t.id, isDone, props.TODOLIST_ID)\r\n                    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.TODOLIST_ID)\r\n\r\n                    return (\r\n                        <li key={t.id} className={'singleTaskContainer'}>\r\n                            <Checkbox checked={t.isDone}\r\n                                      changeStatus={changeTaskStatusHandler}/>\r\n\r\n                            <EditableSpan title={t.title}\r\n                                          className={t.isDone ? 'completed' : ''}\r\n                                          changeTitle={changeTaskTitle}\r\n                            />\r\n\r\n                            <Button value={'x'}\r\n                                    onClick={removeTaskHandler}\r\n                                    className={'deleteButton'}\r\n                                    icon={'TrashIcon'}/>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n            <div className={'filterButtonsContainer'}>\r\n                <Button value={'All'}\r\n                        onClick={() => changeTodolistFilterHandler('All')}\r\n                        filter={props.filter}/>\r\n\r\n                <Button value={'Active'}\r\n                        onClick={() => changeTodolistFilterHandler('Active')}\r\n                        filter={props.filter}/>\r\n\r\n                <Button value={'Completed'}\r\n                        onClick={() => changeTodolistFilterHandler('Completed')}\r\n                        filter={props.filter}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './Todolist'\r\nimport {v1} from 'uuid'\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst TODOLIST_ID_1 = v1()\r\nconst TODOLIST_ID_2 = v1()\r\n\r\nexport const App = () => {\r\n    const [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: TODOLIST_ID_1, title: 'What to Learn', filter: 'All'},\r\n        {id: TODOLIST_ID_2, title: 'What to Buy', filter: 'All'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [TODOLIST_ID_1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ],\r\n\r\n        [TODOLIST_ID_2]: [\r\n            {id: v1(), title: 'Beer', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Cola', isDone: false},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Smoke', isDone: true},\r\n        ],\r\n    })\r\n\r\n    useEffect(() => {\r\n        const todolistsString = localStorage.getItem('todolists')\r\n        if (todolistsString) {\r\n            const todolistsInit = JSON.parse(todolistsString)\r\n            setTodolists(todolistsInit)\r\n        }\r\n\r\n        const tasksString = localStorage.getItem('tasks')\r\n        if (tasksString) {\r\n            const tasksInit = JSON.parse(tasksString)\r\n            setTasks(tasksInit)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('todolists', JSON.stringify(todolists))\r\n        localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    }, [todolists, tasks])\r\n\r\n    const removeTask = (taskID: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, TODOLIST_ID: string) => {\r\n        const newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[TODOLIST_ID] = [newTask, ...tasks[TODOLIST_ID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, isDone} : t))\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodolistFilter = (filter: FilterValuesType, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(todolist => (todolist.id === TODOLIST_ID ? {...todolist, filter} : todolist)))\r\n    }\r\n    const removeTodolist = (TODOLIST_ID: string) => {\r\n        setTodolists(todolists.filter(todolist => todolist.id !== TODOLIST_ID))\r\n        delete tasks[TODOLIST_ID]\r\n    }\r\n    const tasksToRender = (todolist: TodolistType): TaskType[] => {\r\n        switch (todolist.filter) {\r\n            case 'Completed':\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            case 'Active':\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        const NEW_TODOLIST_ID = v1()\r\n        const newTodolist: TodolistType = {\r\n            id: NEW_TODOLIST_ID,\r\n            title: title,\r\n            filter: \"All\"\r\n        }\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({ ...tasks, [NEW_TODOLIST_ID]:[] })\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string, TODOLIST_ID: string) => {\r\n        setTodolists(todolists.map(todolist => (todolist.id === TODOLIST_ID ? {...todolist, title} : todolist)))\r\n    }\r\n\r\n    const changeTaskTitle = (taskID: string, title: string, TODOLIST_ID: string) => {\r\n        tasks[TODOLIST_ID] = tasks[TODOLIST_ID].map(t => (t.id === taskID ? {...t, title} : t))\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            <AddItemForm addItem={addTodolist}/>\r\n\r\n            {todolists.map(todolist => {\r\n                return (\r\n                    <Todolist\r\n                        key={todolist.id}\r\n                        TODOLIST_ID={todolist.id}\r\n                        title={todolist.title}\r\n                        filter={todolist.filter}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodolistFilter={changeTodolistFilter}\r\n                        removeTodolist={removeTodolist}\r\n                        tasksToRender={tasksToRender(todolist)}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}